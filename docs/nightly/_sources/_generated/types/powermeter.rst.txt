
.. _everest_types_powermeter:


##########
powermeter
##########

Powermeter types

.. _powermeter-TransactionReq:

| **TransactionReq**:*object* 
|  Required input parameter for starting an OCMF transaction. These values will be included in the signed OCMF packet.
|  properties:
|   **evse_id**:*string* <required>
|    Id of this EVSE
|   **transaction_id**:*string* <required>
|    OCPP transaction UUID
|   **identification_status**:*string* <required> (:ref:`powermeter-OCMFUserIdentificationStatus <powermeter-OCMFUserIdentificationStatus>`)
|    OCMF Identification Status (IS): General status for user assignment
|    **There is an extended definition for this object** :ref:`here <powermeter-OCMFUserIdentificationStatus>`.
|   **identification_level**:*string* <optional> (:ref:`powermeter-OCMFIdentificationLevel <powermeter-OCMFIdentificationLevel>`)
|    OCMF Identification Level (IL): Encoded overall status of the user assignment
|    **There is an extended definition for this object** :ref:`here <powermeter-OCMFIdentificationLevel>`.
|   **identification_flags**:*array* <required>
|    OCMF Identification Flags (IF): Detailed statements about the user assignment, represented by one or more identifiers
|    **array_item**:*string*  (:ref:`powermeter-OCMFIdentificationFlags <powermeter-OCMFIdentificationFlags>`)
|     
|     **There is an extended definition for this object** :ref:`here <powermeter-OCMFIdentificationFlags>`.
| 
|   **identification_type**:*string* <required> (:ref:`powermeter-OCMFIdentificationType <powermeter-OCMFIdentificationType>`)
|    OCMF Identification Type (IT): Type of identification data
|    **There is an extended definition for this object** :ref:`here <powermeter-OCMFIdentificationType>`.
|   **identification_data**:*string* <optional>
|    OCMF Identification Data (ID): The actual identification data e.g. a hex-coded UID according to ISO 14443.
|   **tariff_text**:*string* <optional>
|    A textual description used to identify a unique tariff.  This field is intended for the tariff designation in "Direct Payment" use case.

.. _powermeter-TransactionRequestStatus:

| **TransactionRequestStatus**:*string* 
|  Status of a transaction start or stop request.
|  enum:
|    - OK
|    - NOT_SUPPORTED
|    - UNEXPECTED_ERROR

.. _powermeter-TransactionStartResponse:

| **TransactionStartResponse**:*object* 
|  Return value when a transaction is started.
|  properties:
|   **status**:*object* <required> (:ref:`powermeter-TransactionRequestStatus <powermeter-TransactionRequestStatus>`)
|    Response status that indicates whether the transaction start request could successfully be performed.
|    **There is an extended definition for this object** :ref:`here <powermeter-TransactionRequestStatus>`.
|   **error**:*string* <optional>
|    If status is not OK, a verbose error message.
|   **transaction_min_stop_time**:*string* <optional>
|    Earliest point in time the started transaction can be stopped again (if a minimum duration is required by the meter); yields a RFC3339 timestamp.
|    format:date-time
|   **transaction_max_stop_time**:*string* <optional>
|    Deadline for the transaction to be stopped again (if a minimum duration is required by the meter); yields a RFC3339 timestamp.
|    format:date-time

.. _powermeter-TransactionStopResponse:

| **TransactionStopResponse**:*object* 
|  Report returned when a signed transaction is requested to stop. If successful, includes the signed meter value object. In case of an error, an additional error message can be provided.
|  properties:
|   **status**:*object* <required> (:ref:`powermeter-TransactionRequestStatus <powermeter-TransactionRequestStatus>`)
|    Response status that indicates whether the transaction stop request could successfully be performed.
|    **There is an extended definition for this object** :ref:`here <powermeter-TransactionRequestStatus>`.
|   **start_signed_meter_value**:*object* <optional> (:ref:`units_signed-SignedMeterValue <units_signed-SignedMeterValue>`)
|    The signed meter value report for start of transaction. Needs to be filled if meter provides separate values for start and stop.
|    **There is an extended definition for this object** :ref:`here <units_signed-SignedMeterValue>`.
|   **signed_meter_value**:*object* <optional> (:ref:`units_signed-SignedMeterValue <units_signed-SignedMeterValue>`)
|    The signed meter value report of the stopped transaction. Must be provided if status is OK.
|    **There is an extended definition for this object** :ref:`here <units_signed-SignedMeterValue>`.
|   **error**:*string* <optional>
|    If status is not OK, a verbose error message.

.. _powermeter-OCMFIdentificationLevel:

| **OCMFIdentificationLevel**:*string* 
|  NONE: There is no user assignment. The other data for user assignment have no significance. HEARSAY: The assignment is unsecured; e.g. by reading an RFID UID. TRUSTED: The mapping can be trusted to some extent, but there is no absolute reliability. Example: Authorization by backend. VERIFIED: The assignment has been verified by the signature component and special measures. CERTIFIED: The assignment was verified by the signature component using a cryptographic signature that certifies the assignment. SECURE: The mapping was established by a secure feature (e.g. secure RFID card, ISO 15118 with plug and charge, etc.). MISMATCH: Error; UIDs do not match. INVALID: Error; certificate not correct (check negative). OUTDATED: Error; referenced trust certificate expired. UNKNOWN: Certificate could not be successfully verified (no matching trust certificate found).
|  enum:
|    - NONE
|    - HEARSAY
|    - TRUSTED
|    - VERIFIED
|    - CERTIFIED
|    - SECURE
|    - MISMATCH
|    - INVALID
|    - OUTDATED
|    - UNKNOWN

.. _powermeter-OCMFIdentificationFlags:

| **OCMFIdentificationFlags**:*string* 
|  RFID_NONE: No assignment via RFID RFID_PLAIN: Assignment via external RFID card reader RFID_RELATED: Assignment via protected RFID card reader RFID_PSK: A previously known shared key (pre-shared key) was used, e.g. with a secured RFID card. OCPP_NONE: No user assignment by OCPP OCPP_RS: Assignment by OCPP RemoteStart method OCPP_AUTH: Assignment by OCPP Authorize method OCPP_RS_TLS: Assignment by OCPP RemoteStart method, obtained via a secured TLS connection. OCPP_AUTH_TLS: Assignment by OCPP Authorize method, obtained via a secured TLS connection. OCPP_CACHE: Assignment by authorization cache of OCPP OCPP_WHITELIST: Assignment by whitelist from OCPP OCPP_CERTIFIED: A certificate of the backend was used which certifies the user mapping. ISO15118_NONE: no user assignment by ISO 15118 ISO15118_PNC: Plug & Charge was used PLMN_NONE: no user assignment PLMN_RING: call PLMN_SMS: short message
|  enum:
|    - RFID_NONE
|    - RFID_PLAIN
|    - RFID_RELATED
|    - RFID_PSK
|    - OCPP_NONE
|    - OCPP_RS
|    - OCPP_AUTH
|    - OCPP_RS_TLS
|    - OCPP_AUTH_TLS
|    - OCPP_CACHE
|    - OCPP_WHITELIST
|    - OCPP_CERTIFIED
|    - ISO15118_NONE
|    - ISO15118_PNC
|    - PLMN_NONE
|    - PLMN_RING
|    - PLMN_SMS

.. _powermeter-OCMFIdentificationType:

| **OCMFIdentificationType**:*string* 
|  NONE: No assignment available DENIED: Assignment currently not available (due to two-factor authorization) UNDEFINED: Type not specified ISO14443: UID of an RFID card according to ISO 14443. Represented as 4 or 7 bytes in hexadecimal notation. ISO15693: UID of an RFID card according to ISO 15693. Represented as 8 bytes in hexadecimal notation. EMAID: Electro-Mobility-Account-ID according to ISO/IEC 15118 (string with length 14 or 15) EVCCID: ID of an electric vehicle according to ISO/IEC 15118 (maximum length 6 characters) EVCOID: EV Contract ID according to DIN 91286. ISO7812: Identification card format according to ISO/IEC 7812 (credit and bank cards, etc.) CARD_TXN_NR: Card transaction number (CardTxNbr) for a payment with credit or bank card used in a terminal at the charging point. CENTRAL: Centrally generated ID. No exact format defined, can be e.g. a UUID. (OCPP 2.0) CENTRAL_1: Centrally generated ID, e.g. by start via SMS. No exact format defined. (until OCPP 1.6) CENTRAL_2: Centrally generated ID, e.g. by operator start. No exact format defined. (until OCPP 1.6) LOCAL: Locally generated ID. No exact format defined, might be e.g. a UUID. (OCPP 2.0) LOCAL_1: Locally generated ID, e.g. ID generated internally by the charge point. No exact format defined. (until OCPP 1.6) LOCAL_2: Locally generated ID, for other cases. No exact format defined. (until OCPP 1.6) PHONE_NUMBER: International phone number with leading "+". KEY_CODE: User-related private key code. No exact format defined.
|  enum:
|    - NONE
|    - DENIED
|    - UNDEFINED
|    - ISO14443
|    - ISO15693
|    - EMAID
|    - EVCCID
|    - EVCOID
|    - ISO7812
|    - CARD_TXN_NR
|    - CENTRAL
|    - CENTRAL_1
|    - CENTRAL_2
|    - LOCAL
|    - LOCAL_1
|    - LOCAL_2
|    - PHONE_NUMBER
|    - KEY_CODE

.. _powermeter-OCMFUserIdentificationStatus:

| **OCMFUserIdentificationStatus**:*string* 
|  General status for user assignment ASSIGNED: user successfully assigned NOT_ASSIGNED: user not assigned
|  enum:
|    - ASSIGNED
|    - NOT_ASSIGNED

.. _powermeter-Powermeter:

| **Powermeter**:*object* 
|  Measured dataset (AC or DC)
|  properties:
|   **timestamp**:*string* <required>
|    Timestamp of measurement
|    format:date-time
|   **meter_id**:*string* <optional>
|    A (user defined) meter if (e.g. id printed on the case)
|   **phase_seq_error**:*boolean* <optional>
|    AC only: true for 3 phase rotation error (ccw)
|   **energy_Wh_import**:*object* <required> (:ref:`units-Energy <units-Energy>`)
|    Imported energy in Wh (from grid)
|    **There is an extended definition for this object** :ref:`here <units-Energy>`.
|   **energy_Wh_export**:*object* <optional> (:ref:`units-Energy <units-Energy>`)
|    Exported energy in Wh (to grid)
|    **There is an extended definition for this object** :ref:`here <units-Energy>`.
|   **power_W**:*object* <optional> (:ref:`units-Power <units-Power>`)
|    Instantaneous power in Watt. Negative values are exported, positive values imported Energy.
|    **There is an extended definition for this object** :ref:`here <units-Power>`.
|   **voltage_V**:*object* <optional> (:ref:`units-Voltage <units-Voltage>`)
|    Voltage in Volts
|    **There is an extended definition for this object** :ref:`here <units-Voltage>`.
|   **VAR**:*object* <optional> (:ref:`units-ReactivePower <units-ReactivePower>`)
|    Reactive power VAR
|    **There is an extended definition for this object** :ref:`here <units-ReactivePower>`.
|   **current_A**:*object* <optional> (:ref:`units-Current <units-Current>`)
|    Current in ampere
|    **There is an extended definition for this object** :ref:`here <units-Current>`.
|   **frequency_Hz**:*object* <optional> (:ref:`units-Frequency <units-Frequency>`)
|    Grid frequency in Hertz
|    **There is an extended definition for this object** :ref:`here <units-Frequency>`.
|   **energy_Wh_import_signed**:*object* <optional> (:ref:`units_signed-Energy <units_signed-Energy>`)
|    Imported energy in Wh (from grid)
|    **There is an extended definition for this object** :ref:`here <units_signed-Energy>`.
|   **energy_Wh_export_signed**:*object* <optional> (:ref:`units_signed-Energy <units_signed-Energy>`)
|    Exported energy in Wh (to grid)
|    **There is an extended definition for this object** :ref:`here <units_signed-Energy>`.
|   **power_W_signed**:*object* <optional> (:ref:`units_signed-Power <units_signed-Power>`)
|    Instantaneous power in Watt. Negative values are exported, positive values imported Energy.
|    **There is an extended definition for this object** :ref:`here <units_signed-Power>`.
|   **voltage_V_signed**:*object* <optional> (:ref:`units_signed-Voltage <units_signed-Voltage>`)
|    Voltage in Volts
|    **There is an extended definition for this object** :ref:`here <units_signed-Voltage>`.
|   **VAR_signed**:*object* <optional> (:ref:`units_signed-ReactivePower <units_signed-ReactivePower>`)
|    Reactive power VAR
|    **There is an extended definition for this object** :ref:`here <units_signed-ReactivePower>`.
|   **current_A_signed**:*object* <optional> (:ref:`units_signed-Current <units_signed-Current>`)
|    Current in ampere
|    **There is an extended definition for this object** :ref:`here <units_signed-Current>`.
|   **frequency_Hz_signed**:*object* <optional> (:ref:`units_signed-Frequency <units_signed-Frequency>`)
|    Grid frequency in Hertz
|    **There is an extended definition for this object** :ref:`here <units_signed-Frequency>`.
|   **signed_meter_value**:*object* <optional> (:ref:`units_signed-SignedMeterValue <units_signed-SignedMeterValue>`)
|    Signed collection of instantaneous meter values if supported by the meter. This is intended for meters that only support signing a collection of meter values.
|    **There is an extended definition for this object** :ref:`here <units_signed-SignedMeterValue>`.
