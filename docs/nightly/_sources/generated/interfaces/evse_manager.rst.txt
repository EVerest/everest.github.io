
.. _everest_interfaces_evse_manager:


############
evse_manager
############

| This interface defines the evse manager. An evse manager represents the charging kernel of one physical connector.


*********
Variables
*********
| **session_event**:*object* (:ref:`evse_manager-SessionEvent <evse_manager-SessionEvent>`)
|  Emits all events related to sessions
|  **There is an extended definition for this object** :ref:`here <evse_manager-SessionEvent>`.
| **limits**:*object* (:ref:`evse_manager-Limits <evse_manager-Limits>`)
|  Limits of this evse, published on change
|  **There is an extended definition for this object** :ref:`here <evse_manager-Limits>`.
| **ev_info**:*object* (:ref:`evse_manager-EVInfo <evse_manager-EVInfo>`)
|  More details about the EV if available
|  **There is an extended definition for this object** :ref:`here <evse_manager-EVInfo>`.
| **telemetry**:*object* (:ref:`board_support-Telemetry <board_support-Telemetry>`)
|  Other telemetry
|  **There is an extended definition for this object** :ref:`here <board_support-Telemetry>`.
| **powermeter**:*object* (:ref:`powermeter-Powermeter <powermeter-Powermeter>`)
|  Measured dataset
|  **There is an extended definition for this object** :ref:`here <powermeter-Powermeter>`.
| **evse_id**:*string*
|  EVSE ID including the connector number, e.g. DE*PNX*E123456*1
| **hw_capabilities**:*object* (:ref:`board_support-HardwareCapabilities <board_support-HardwareCapabilities>`)
|  Hardware capability/limits
|  **There is an extended definition for this object** :ref:`here <board_support-HardwareCapabilities>`.

********
Commands
********
| **get_id**:*integer*
|  Call to get the connector id of the evse manager
|  **Result**:*integer*
|   Returns the connector id of the evse manager
| **enable**:*boolean*
|  Enables the evse. EVSE is available for charging after this operation
|  **Result**:*boolean*
|   Returns true if evse was enabled (or was enabled before), returns false if enable failed e.g. due to permanent fault.
| **disable**:*boolean*
|  Disables the evse. EVSE is not available for charging after this operation
|  **Result**:*boolean*
|   Returns true if evse was disabled (or was disabled before), returns false if it could not be disabled (i.e. due to communication error with hardware)
| **authorize**:*void*
|  Authorizes the evse manager to start a transaction using the given id tag.
|  **id_tag**:*string*
|   The authorized id tag
|  **pnc**:*boolean*
|   true Pnc auth, false EIM auth
| **withdraw_authorization**:*void*
|  Call to signals that EVSE is not further authorized to start a transaction (e.g. on a connection_timeout)
| **reserve**:*boolean*
|  Call to signal that EVSE is reserved. This can be used to e.g. change the color of the HMI LEDs to indicate reservation.
|  **reservation_id**:*integer*
|   The reservation id (should be added to the TransactionStarted event)
|  **Result**:*boolean*
|   Returns true if the EVSE accepted the reservation, else false.
| **cancel_reservation**:*void*
|  Call to signal that EVSE is not reserved anymore
| **set_faulted**:*void*
|  Sets the evse manager to faulted externally. It may also switch to faulted itself if it detects an internal error.
| **pause_charging**:*boolean*
|  Call to signal EVSE to pause charging
|  **Result**:*boolean*
|   Returns true if successfully paused or was already in paused_by_evse mode
| **resume_charging**:*boolean*
|  Call to signal EVSE to resume charging
|  **Result**:*boolean*
|   Returns true if resume was successful, false otherwise (e.g. resuming a car pause won't work)
| **stop_transaction**:*boolean*
|  Stops transaction and cancels charging externally, charging can only be resumed by replugging car. EVSE will also stop transaction automatically e.g. on disconnect, so this only needs to be called if the transaction should end before.
|  **request**:*object* (:ref:`evse_manager-StopTransactionRequest <evse_manager-StopTransactionRequest>`)
|   Request to stop the transaction.
|   **There is an extended definition for this object** :ref:`here <evse_manager-StopTransactionRequest>`.
|  **Result**:*boolean*
|   Returns true if successful
| **force_unlock**:*boolean*
|  Forces EVSE to unlock connector now. During normal operation, connector will be locked/unlocked in the correct sequence. Do not use this function except if explicitly requested by e.g. management cloud.
|  **Result**:*boolean*
|   Returns true if unlocking sequence was successfully executed
| **set_local_max_current**:*string*
|  Sets the local maximum current limit for any phase.
|  **max_current**:*number*
|   maximum current
|  **Result**:*string* (:ref:`evse_manager-SetLocalMaxCurrentResult <evse_manager-SetLocalMaxCurrentResult>`)
|   Returns success or error code
|   **There is an extended definition for this object** :ref:`here <evse_manager-SetLocalMaxCurrentResult>`.
| **switch_three_phases_while_charging**:*string*
|  Switch three phases while charging
|  **three_phases**:*boolean*
|   True: switch to three phases, false: switch to single phase
|  **Result**:*string* (:ref:`evse_manager-SwitchThreePhasesWhileChargingResult <evse_manager-SwitchThreePhasesWhileChargingResult>`)
|   Returns success or error code
|   **There is an extended definition for this object** :ref:`here <evse_manager-SwitchThreePhasesWhileChargingResult>`.
| **get_signed_meter_value**:*string*
|  Returns a signed meter value. Includes current id_token if session is running.
|  **Result**:*string*
|   Signed meter value
