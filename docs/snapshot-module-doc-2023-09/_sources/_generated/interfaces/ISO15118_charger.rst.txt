
.. _everest_interfaces_ISO15118_charger:


################
ISO15118_charger
################

| This interface defines a ISO15118 charger.


*********
Variables
*********
| **Require_Auth_EIM**:*null*
|  An EIM authorization is requiered
| **Require_Auth_PnC**:*object* (:ref:`authorization-ProvidedIdToken <authorization-ProvidedIdToken>`)
|  The EVCC provides the payment details for a PnC authorization by sending the signature certificate chain and eMAID.
|  **There is an extended definition for this object** :ref:`here <authorization-ProvidedIdToken>`.
| **AC_Close_Contactor**:*null*
|  The contactor should be closed
| **AC_Open_Contactor**:*null*
|  The contactor should be opened
| **Start_CableCheck**:*null*
|  The charger should now start a cable check
| **DC_Open_Contactor**:*null*
|  The contactor should be opened
| **V2G_Setup_Finished**:*null*
|  V2G_Setup_Finished from ISO15118-3. Trigger when EV sends a PowerDeliveryReq message with ChargeProgess equals Start or Stop
| **currentDemand_Started**:*null*
|  The charging process has started and the EV wants to be charged
| **currentDemand_Finished**:*null*
|  The charging process was finished
| **EVCCIDD**:*string*
|  Specifies the EVs identification in a readable format. It contains the MAC address of the EVCC in uppercase
|  pattern:
| **SelectedPaymentOption**:*string* (:ref:`iso15118_charger-PaymentOption <iso15118_charger-PaymentOption>`)
|  This element is used for indicating the payment type
|  **There is an extended definition for this object** :ref:`here <iso15118_charger-PaymentOption>`.
| **RequestedEnergyTransferMode**:*string* (:ref:`iso15118_charger-EnergyTransferMode <iso15118_charger-EnergyTransferMode>`)
|  Selected energy transfer mode for charging that is requested by the EVCC.
|  **There is an extended definition for this object** :ref:`here <iso15118_charger-EnergyTransferMode>`.
| **DepartureTime**:*string*
|  Optional: [RFC3339 UTC] This element is used to indicate when the vehicle intends to finish the charging process
|  format:
| **AC_EAmount**:*number*
|  [Wh] Amount of energy reflecting the EV's estimate how much energy is needed to fulfill the user configured charging goal for the current charging session
| **AC_EVMaxVoltage**:*number*
|  [V] The RMS of the maximal nominal voltage the vehicle can accept, measured between one phase and neutral
| **AC_EVMaxCurrent**:*number*
|  [A] Maximum current supported by the EV per phase
| **AC_EVMinCurrent**:*number*
|  [A] EVMinCurrent is used to indicate to the SECC that charging below this minimum is not energy/cost efficient for the EV
| **DC_EVEnergyCapacity**:*number*
|  Optional: [Wh] Energy capacity of the EV
| **DC_EVEnergyRequest**:*number*
|  Optional: [Wh] Amount of energy the EV requests from the EVSE
| **DC_FullSOC**:*number*
|  Optional: [%] SOC at which the EV considers the battery to be fully charged
| **DC_BulkSOC**:*number*
|  Optional: [%] SOC at which the EV considers a fast charge process to end
| **DC_EVStatus**:*object* (:ref:`iso15118_charger-DC_EVStatusType <iso15118_charger-DC_EVStatusType>`)
|  Current status of the EV
|  **There is an extended definition for this object** :ref:`here <iso15118_charger-DC_EVStatusType>`.
| **DC_BulkChargingComplete**:*boolean*
|  Optional: If set to TRUE, the EV indicates that bulk charge (approx. 80% SOC) is complete
| **DC_ChargingComplete**:*boolean*
|  Optional: If set to TRUE, the EV indicates that full charge (100% SOC) is complete
| **DC_EVTargetVoltageCurrent**:*object* (:ref:`iso15118_charger-DC_EVTargetValues <iso15118_charger-DC_EVTargetValues>`)
|  Target voltage and current requested by the EV
|  **There is an extended definition for this object** :ref:`here <iso15118_charger-DC_EVTargetValues>`.
| **DC_EVMaximumLimits**:*object* (:ref:`iso15118_charger-DC_EVMaximumLimits <iso15118_charger-DC_EVMaximumLimits>`)
|  Maximum Values (current, power and voltage) supported and allowed by the EV
|  **There is an extended definition for this object** :ref:`here <iso15118_charger-DC_EVMaximumLimits>`.
| **DC_EVRemainingTime**:*object* (:ref:`iso15118_charger-DC_EVRemainingTime <iso15118_charger-DC_EVRemainingTime>`)
|  Estimated or calculated time until bulk and full charge is complete
|  **There is an extended definition for this object** :ref:`here <iso15118_charger-DC_EVRemainingTime>`.
| **Certificate_Request**:*object* (:ref:`iso15118_charger-Request_Exi_Stream_Schema <iso15118_charger-Request_Exi_Stream_Schema>`)
|  The vehicle requests the SECC to deliver the certificate that belong  to the currently valid contract of the vehicle. Response will be reported async via  set_Get_Certificate_Response
|  **There is an extended definition for this object** :ref:`here <iso15118_charger-Request_Exi_Stream_Schema>`.
| **dlink_terminate**:*null*
|  Terminate the data link and become UNMATCHED.
| **dlink_error**:*null*
|  Terminate the data link and restart the matching process.
| **dlink_pause**:*null*
|  Request power saving mode, while staying MATCHED.
| **EV_AppProtocol**:*array*
|  Debug_Lite - This request message provides a list of charging protocols supported by the EVCC
|  items:
|   description:
|   type:
|   properties:
|    ProtocolNamespace:
|     description:
|     type:
|    VersionNumberMajor:
|     description:
|     type:
|    VersionNumberMinor:
|     description:
|     type:
|    SchemaID:
|     description:
|     type:
|    Priority:
|     description:
|     type:
| **V2G_Messages**:*object* (:ref:`iso15118_charger-V2G_Messages <iso15118_charger-V2G_Messages>`)
|  Debug - This element contains all V2G elements and should be used for debug purposes only
|  **There is an extended definition for this object** :ref:`here <iso15118_charger-V2G_Messages>`.

********
Commands
********
| **set_EVSEID**:*void*
|  One Time Setup at Boot - Set an ID that uniquely identifies the EVSE and the power outlet the vehicle is connected to
|  **EVSEID**:*string*
|   EVSE ID
|  **EVSEID_DIN**:*string*
|   EVSE ID (DIN70121) after DIN SPEC 91286
| **set_PaymentOptions**:*void*
|  One Time Setup at Boot - Providing a list of payment options to the EVCC
|  **PaymentOptions**:*array*
|   An array of payment options
|   items:
|    description:
|    type:
|    enum: Contract, ExternalPayment
| **set_SupportedEnergyTransferMode**:*void*
|  One Time Setup at Boot - Available energy transfer modes supported by the EVSE
|  **SupportedEnergyTransferMode**:*array*
|   An array of supported engery modes
|   items:
|    description:
|    type:
|    enum: AC_single_phase_core, AC_three_phase_core, DC_core, DC_extended, DC_combo_core, DC_unique
| **set_AC_EVSENominalVoltage**:*void*
|  One Time Setup at Boot - Set Line voltage supported by the EVSE. This is the voltage measured between one phases and neutral
|  **EVSENominalVoltage**:*number*
|   [V] Nominal Voltage
| **set_DC_EVSECurrentRegulationTolerance**:*void*
|  One Time Setup at Boot (Optional) - Set the absolute magnitude of the regulation tolerance of the EVSA
|  **EVSECurrentRegulationTolerance**:*number*
|   Set EVSECurrentRegulationTolerance [A]
| **set_DC_EVSEPeakCurrentRipple**:*void*
|  One Time Setup at Boot - Set the peak-to-peak magnitude of the current ripple of the EVSE
|  **EVSEPeakCurrentRipple**:*number*
|   Set EVSEPeakCurrentRipple [A]
| **set_ReceiptRequired**:*void*
|  One Time Setup at Boot (Optional) - This element is used by the SECC to indicate that the EVCC is required to send a MeteringReceiptReq message for the purpose of signing the meter info record
|  **ReceiptRequired**:*boolean*
|   True: Receipt is required, False: Receipt is not required
| **set_FreeService**:*void*
|  On Session Setup - Set FreeService so the EVCC can use the service free of charge or not
|  **FreeService**:*boolean*
|   True: Charging is free, False: Charging is not free
| **set_EVSEEnergyToBeDelivered**:*void*
|  On Session Setup (Optional) - Set the Amount of energy to be delivered by the EVSE
|  **EVSEEnergyToBeDelivered**:*number*
|   Set EVSEEnergyToBeDelivered [Wh]
| **enable_debug_mode**:*void*
|  On Session Setup - Set different modes for the debug mode.
|  **debug_mode**:*string* (:ref:`iso15118_charger-DebugMode <iso15118_charger-DebugMode>`)
|   The various debug modes
|   **There is an extended definition for this object** :ref:`here <iso15118_charger-DebugMode>`.
| **set_Auth_Okay_EIM**:*void*
|  Response on Require_Auth_EIM - Set this element if the authorization was either successful or unsuccessful
|  **auth_okay_eim**:*boolean*
|   True: Authentication is okay
| **set_Auth_Okay_PnC**:*void*
|  PaymentDetails - With this message the SECC informs the EVCC whether the previously provided payment details were accepted or not
|  **status**:*string* (:ref:`authorization-AuthorizationStatus <authorization-AuthorizationStatus>`)
|   Authorization status of the ID Token
|   **There is an extended definition for this object** :ref:`here <authorization-AuthorizationStatus>`.
|  **certificateStatus**:*string* (:ref:`authorization-CertificateStatus <authorization-CertificateStatus>`)
|   Certificate status information
|   **There is an extended definition for this object** :ref:`here <authorization-CertificateStatus>`.
| **set_FAILED_ContactorError**:*void*
|  Any Time - Set this error when the contactor is opened or closed at the wrong moment
|  **ContactorError**:*boolean*
|   True: ContactError happend
| **set_RCD_Error**:*void*
|  Any Time - Indicates the current status of the Residual Current Device (RCD)
|  **RCD**:*boolean*
|   If RCD is equal to true, the RCD has detected an error. If RCD is equal to false, the RCD has not detected an error
| **stop_charging**:*void*
|  During charging - Stops the charging process
|  **stop_charging**:*boolean*
|   True: Stop, False: Continue
| **set_DC_EVSEPresentVoltageCurrent**:*void*
|  Starting from PowerDelivery to WeldingDetection - Set the present voltage and current for the EVSE
|  **EVSEPresentVoltage_Current**:*object* (:ref:`iso15118_charger-DC_EVSEPresentVoltage_Current <iso15118_charger-DC_EVSEPresentVoltage_Current>`)
|   Present values (current and voltage) for the EVSE
|   **There is an extended definition for this object** :ref:`here <iso15118_charger-DC_EVSEPresentVoltage_Current>`.
| **set_AC_EVSEMaxCurrent**:*void*
|  ChargeParameterDiscovery and during charging - Set the Maximum allowed line current restriction per phase
|  **EVSEMaxCurrent**:*number*
|   [A] Max current
| **set_DC_EVSEMaximumLimits**:*void*
|  ChargeParameterDiscovery and during charging - Set the maximum current, power and voltage for the EVSE
|  **EVSEMaximumLimits**:*object* (:ref:`iso15118_charger-DC_EVSEMaximumLimits <iso15118_charger-DC_EVSEMaximumLimits>`)
|   Maximum Values (current, power and voltage) the EVSE can deliver
|   **There is an extended definition for this object** :ref:`here <iso15118_charger-DC_EVSEMaximumLimits>`.
| **set_DC_EVSEMinimumLimits**:*void*
|  ChargeParameterDiscovery - Set the minimum current and voltage for the EVSE
|  **EVSEMinimumLimits**:*object* (:ref:`iso15118_charger-DC_EVSEMinimumLimits <iso15118_charger-DC_EVSEMinimumLimits>`)
|   Minimum Values (current and voltage) the EVSE can deliver
|   **There is an extended definition for this object** :ref:`here <iso15118_charger-DC_EVSEMinimumLimits>`.
| **set_EVSEIsolationStatus**:*void*
|  From ChargeParameterDiscovery to WeldingDetection (Optional) - Set the isolation condition (result of the isolation monitoring)
|  **EVSEIsolationStatus**:*string* (:ref:`iso15118_charger-IsolationStatus <iso15118_charger-IsolationStatus>`)
|   Set the isolation status
|   **There is an extended definition for this object** :ref:`here <iso15118_charger-IsolationStatus>`.
| **set_EVSE_UtilityInterruptEvent**:*void*
|  From ChargeParameterDiscovery to WeldingDetection - Utility Interrupt Event, Utility or Equipment operator has requested a temporary reduction in load
|  **EVSE_UtilityInterruptEvent**:*boolean*
|   True: Interrupt Event happend
| **set_EVSE_Malfunction**:*void*
|  Any Time - A non-recoverable charger fault has occurred (Isolation Failure, ...). It is permanently faulted
|  **EVSE_Malfunction**:*boolean*
|   True: Malfunction fault
| **set_EVSE_EmergencyShutdown**:*void*
|  Any Time - Charging System Incompatibility, Emergency Shutdown or 'E-Stop' button pressed at charging station
|  **EVSE_EmergencyShutdown**:*boolean*
|   True: Emergency Stop
| **set_MeterInfo**:*void*
|  During charging (Optional) - Includes the meterInfo record containing the latest meter reading and other meter relevant data
|  **powermeter**:*object* (:ref:`powermeter-Powermeter <powermeter-Powermeter>`)
|   Measured dataset
|   **There is an extended definition for this object** :ref:`here <powermeter-Powermeter>`.
| **contactor_closed**:*void*
|  Response on AC_Close_Contactor - Set this element if the contactor is closed
|  **status**:*boolean*
|   True: Contactor is closed
| **contactor_open**:*void*
|  Response on AC_Open_Contactor - Set this element if the contactor is open
|  **status**:*boolean*
|   True: Contactor is open
| **cableCheck_Finished**:*void*
|  Cable check is finished, voltage is under 20V and insulation resistor on the cable is alright
|  **status**:*boolean*
|   True: Cable check is okay
| **set_Certificate_Service_Supported**:*void*
|  ServiceDiscoveryRes - The charger supports the certificate installation/update service and has a connection to an SA for this purpose
|  **status**:*boolean*
|   True: The service is supported
| **set_Get_Certificate_Response**:*void*
|  CertificateInstallationRes/CertificateUpdateRes - The new/updated
|  Contract Certificate (including the certificate chain)
| and the corresponding encrypted private key are sent via the SECC to the EVCC This is an async response to a previously published Certificate_Request
|  **Existream_Status**:*object* (:ref:`iso15118_charger-Response_Exi_Stream_Status <iso15118_charger-Response_Exi_Stream_Status>`)
|   The response raw exi stream and the status from the CSMS system
|   **There is an extended definition for this object** :ref:`here <iso15118_charger-Response_Exi_Stream_Status>`.
| **dlink_ready**:*void*
|  Signals dlink_ready from SLAC layer according to ISO15118-3
|  **value**:*boolean*
|   Set to true when link becomes ready, false when the link is terminated
