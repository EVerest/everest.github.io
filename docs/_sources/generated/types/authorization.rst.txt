
.. _everest_types_authorization:


#############
authorization
#############

Auth token validator types

.. _authorization-AuthorizationStatus:

| **AuthorizationStatus**:*string*
|  Authorization Status enum
|  enum: Accepted, Blocked, ConcurrentTx, Expired, Invalid, NoCredit, NotAllowedTypeEVSE, NotAtThisLocation, NotAtThisTime, Unknown

.. _authorization-CertificateStatus:

| **CertificateStatus**:*string*
|  Certificate status information
|  enum: Accepted, SignatureError, CertificateExpired, CertificateRevoked, NoCertificateAvailable, CertChainError, ContractCancelled

.. _authorization-Identifier:

| **Identifier**:*object*
|  Contains meta information about the identifier
|  required: id_token, type
|  properties:
|   **id_token**:*string*
|    Arbitrary id token string: this has to be printable case insensitive ascii
|   **type**:*string* (:ref:`authorization-TokenType <authorization-TokenType>`)
|    Type of the provider of the identifier
|    **There is an extended definition for this object** :ref:`here <authorization-TokenType>`.
|   **authorization_status**:*string* (:ref:`authorization-AuthorizationStatus <authorization-AuthorizationStatus>`)
|    
|    **There is an extended definition for this object** :ref:`here <authorization-AuthorizationStatus>`.
|   **expiry_time**:*string*
|    Absolute UTC time point when reservation expires in RFC3339 format
|    format:
|   **parent_id_token**:*string*
|    Parent id token of the id token

.. _authorization-ProvidedIdToken:

| **ProvidedIdToken**:*object*
|  Type for Token provided by auth token providers
|  required: id_token, type
|  properties:
|   **id_token**:*string*
|    Arbitrary token string: this has to be printable case insensitive ascii: !!!FIXME!!! write a regex to allow only printable ascii
|   **type**:*string* (:ref:`authorization-TokenType <authorization-TokenType>`)
|    Type of the token
|    **There is an extended definition for this object** :ref:`here <authorization-TokenType>`.
|   **connectors**:*array*
|    A list of connector ids to which the authorization can be assigned
|    items:
|     type:
|   **prevalidated**:*boolean*
|    Indicates that the id token is already validated by the provider
|   **certificate**:*string*
|    The X.509 certificated presented by EV and encoded in PEM format
|   **iso15118CertificateHashData**:*array*
|    Contains the information needed to verify the EV Contract Certificate via OCSP
|    items:
|     description:
|     type:
|     $ref:

.. _authorization-ValidationResult:

| **ValidationResult**:*object*
|  Result object containing authorization status enum value and an optional parentIdTag
|  required: authorization_status
|  properties:
|   **authorization_status**:*string* (:ref:`authorization-AuthorizationStatus <authorization-AuthorizationStatus>`)
|    
|    **There is an extended definition for this object** :ref:`here <authorization-AuthorizationStatus>`.
|   **certificate_status**:*string* (:ref:`authorization-CertificateStatus <authorization-CertificateStatus>`)
|    
|    **There is an extended definition for this object** :ref:`here <authorization-CertificateStatus>`.
|   **reason**:*string*
|    
|   **expiry_time**:*string*
|    Absolute UTC time point when reservation expires in RFC3339 format
|    format:
|   **parent_id_token**:*string*
|    Parent Id Tag of the validated token

.. _authorization-SelectionAlgorithm:

| **SelectionAlgorithm**:*string*
|  The selection algorithm defines the logic to select one connector for an incoming token.
| SelectionAlgorithm enum:
|   UserInput: This algorithm waits for a user to input for which connector the authorization is provided
|   PlugEvents: This algorithms derives the selected connector based on the order of plug in events of EVs
|  enum: UserInput, PlugEvents

.. _authorization-TokenType:

| **TokenType**:*string*
|  Type of the provided token
|  enum: OCPP, RFID, Autocharge, PlugAndCharge
