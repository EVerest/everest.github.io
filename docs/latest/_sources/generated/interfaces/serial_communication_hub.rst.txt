
.. _everest_interfaces_serial_communication_hub:


########################
serial_communication_hub
########################

| This interface provides multiplexed access to one serial port (e.g. RS485) for multiple clients.



********
Commands
********
| **send_raw**:*string*
|  Send a (user-defined, pre-structured) command via serial interface to the target hardware
|  **target_device_id**:*integer*
|   ID (1 byte) of the device to send the commands to
|  **data_raw**:*object* (:ref:`serial_comm_hub_requests-VectorUint8 <serial_comm_hub_requests-VectorUint8>`)
|   Data content (raw data bytes) to be sent to the target. User must take care of correct structure.
|   **There is an extended definition for this object** :ref:`here <serial_comm_hub_requests-VectorUint8>`.
|  **add_crc16**:*boolean*
|   Add a CRC16 at the end of the message (true) or not (false)
|  **Result**:*string* (:ref:`serial_comm_hub_requests-StatusCodeEnum <serial_comm_hub_requests-StatusCodeEnum>`)
|   Status code of the transfer
|   **There is an extended definition for this object** :ref:`here <serial_comm_hub_requests-StatusCodeEnum>`.
| **send_raw_wait_reply**:*object*
|  Send a (user-defined, pre-structured) command via serial interface to the target hardware and wait for a reply
|  **target_device_id**:*integer*
|   ID (1 byte) of the device to send the commands to
|  **data_raw**:*object* (:ref:`serial_comm_hub_requests-VectorUint8 <serial_comm_hub_requests-VectorUint8>`)
|   Data content (raw data bytes) to be sent to the target. User must take care of correct structure.
|   **There is an extended definition for this object** :ref:`here <serial_comm_hub_requests-VectorUint8>`.
|  **add_crc16**:*boolean*
|   Add a CRC16 at the end of the message (true) or not (false)
|  **Result**:*object* (:ref:`serial_comm_hub_requests-ResultRaw <serial_comm_hub_requests-ResultRaw>`)
|   Result of the transfer
|   **There is an extended definition for this object** :ref:`here <serial_comm_hub_requests-ResultRaw>`.
| **modbus_read_holding_registers**:*object*
|  Send a Modbus RTU 'read holding registers' command via serial interface to the target hardware. (return value: response)
|  **target_device_id**:*integer*
|   ID (1 byte) of the device to send the commands to
|  **first_register_address**:*integer*
|   Start address for read operation (16 bit address)
|  **num_registers_to_read**:*integer*
|   Number of registers to read (16 bit each)
|  **pause_between_messages**:*integer*
|   Ensure a pause between packets on the wire in ms. Some Modbus devices require a minimal pause between the last message and this message. Set to 0 if not needed.
|  **Result**:*object* (:ref:`serial_comm_hub_requests-Result <serial_comm_hub_requests-Result>`)
|   Result of the transfer
|   **There is an extended definition for this object** :ref:`here <serial_comm_hub_requests-Result>`.
| **modbus_read_input_registers**:*object*
|  Send a Modbus RTU 'read input registers' command via serial interface to the target hardware. (return value: response)
|  **target_device_id**:*integer*
|   ID (1 byte) of the device to send the commands to
|  **first_register_address**:*integer*
|   Start address for read operation (16 bit address)
|  **num_registers_to_read**:*integer*
|   Number of registers to read (16 bit each)
|  **pause_between_messages**:*integer*
|   Ensure a pause between packets on the wire in ms. Some Modbus devices require a minimal pause between the last message and this message. Set to 0 if not needed.
|  **Result**:*object* (:ref:`serial_comm_hub_requests-Result <serial_comm_hub_requests-Result>`)
|   Result of the transfer
|   **There is an extended definition for this object** :ref:`here <serial_comm_hub_requests-Result>`.
| **modbus_write_multiple_registers**:*string*
|  Send a Modbus RTU 'write multiple registers' command via serial interface to the target hardware. (return value: response)
|  **target_device_id**:*integer*
|   ID (1 byte) of the device to send the commands to
|  **first_register_address**:*integer*
|   Start address for write operation (16 bit address)
|  **data_raw**:*object* (:ref:`serial_comm_hub_requests-VectorUint16 <serial_comm_hub_requests-VectorUint16>`)
|   Data content to be written to the above selected registers (in 16 bit words)
|   **There is an extended definition for this object** :ref:`here <serial_comm_hub_requests-VectorUint16>`.
|  **pause_between_messages**:*integer*
|   Ensure a pause between packets on the wire in ms. Some Modbus devices require a minimal pause between the last message and this message. Set to 0 if not needed.
|  **Result**:*string* (:ref:`serial_comm_hub_requests-StatusCodeEnum <serial_comm_hub_requests-StatusCodeEnum>`)
|   Status code of the transfer
|   **There is an extended definition for this object** :ref:`here <serial_comm_hub_requests-StatusCodeEnum>`.
