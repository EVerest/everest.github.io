
.. _everest_types_evse_manager:


############
evse_manager
############

EVSE manager types

.. _evse_manager-StopTransactionRequest:

| **StopTransactionRequest**:*object* 
|  Request for a stop transaction containing the reason and an optional id tag
|  properties:
|   **reason**:*string* <required> (:ref:`evse_manager-StopTransactionReason <evse_manager-StopTransactionReason>`)
|    Reason for stopping the transaction
|    **There is an extended definition for this object** :ref:`here <evse_manager-StopTransactionReason>`.
|   **id_tag**:*object* <optional> (:ref:`authorization-ProvidedIdToken <authorization-ProvidedIdToken>`)
|    Id tag that was used to stop the transaction. Only present if transaction was stopped locally.
|    **There is an extended definition for this object** :ref:`here <authorization-ProvidedIdToken>`.

.. _evse_manager-StopTransactionReason:

| **StopTransactionReason**:*string* 
|  Reason for stopping transaction
|   EmergencyStop: Emergency stop button was used
|   EVDisconnected: Disconnecting of cable, vehicle moved away from inductive charge unit
|   HardReset: A hard reset command was received previously
|   Local: Stopped locally on request of the user at the Charge Point. This is a regular termination of a transaction. Examples: presenting an RFID tag, pressing a button to stop
|   Other: Any other reason
|   PowerLoss: Complete loss of power
|   Reboot: A locally initiated reset/reboot occurred
|   Remote: Stopped remotely on request of the user. This is a regular termination of a transaction. Examples: termination using a smartphone app, exceeding a (non local) prepaid credit
|   SoftReset: A soft reset command was received
|   UnlockCommand: Central System sent an Unlock Connector command
|   DeAuthorized: The transaction was stopped because of the authorization status in a StartTransaction.conf
|   EnergyLimitReached: Maximum energy of charging reached. For example: in a pre-paid charging solution
|   GroundFault: A GroundFault has occurred
|   LocalOutOfCredit: A local credit limit enforced through the Charging Station has been exceeded.
|   MasterPass: The transaction was stopped using a token with a MasterPassGroupId.
|   OvercurrentFault: A larger than intended electric current has occurred
|   PowerQuality: Quality of power too low, e.g. voltage too low/high, phase imbalance, etc.
|   SOCLimitReached: Electric vehicle has reported reaching a locally enforced maximum battery State of Charge (SOC)
|   StoppedByEV: The transaction was stopped by the EV
|   TimeLimitReached: EV charging session reached a locally enforced time limit
|   Timeout: EV not connected within timeout
|  enum:
|    - EmergencyStop
|    - EVDisconnected
|    - HardReset
|    - Local
|    - Other
|    - PowerLoss
|    - Reboot
|    - Remote
|    - SoftReset
|    - UnlockCommand
|    - DeAuthorized
|    - EnergyLimitReached
|    - GroundFault
|    - LocalOutOfCredit
|    - MasterPass
|    - OvercurrentFault
|    - PowerQuality
|    - SOCLimitReached
|    - StoppedByEV
|    - TimeLimitReached
|    - Timeout

.. _evse_manager-StartSessionReason:

| **StartSessionReason**:*string* 
|  Reason for session start
|   EVConnected: Session was started because an EV was plugged in
|   Authorized: Session was started because a valid authorization was presented and the EVSE is authorized to start a transaction immediately when an EV is plugged in
|  enum:
|    - EVConnected
|    - Authorized

.. _evse_manager-SwitchThreePhasesWhileChargingResult:

| **SwitchThreePhasesWhileChargingResult**:*string* 
|  Returns success or error code
|   Success: Switching phases was successful
|   Error_NotSupported: Switching phases is not supported
|   Error_NotCharging: EVSE is not charging
|   Error_Hardware: There was a hardware error on switching phases
|  enum:
|    - Success
|    - Error_NotSupported
|    - Error_NotCharging
|    - Error_Hardware

.. _evse_manager-SessionEventEnum:

| **SessionEventEnum**:*string* 
|  Session Event enum
|   Authorized: Signaled when the EVSE is authorized for charging
|   Deauthorized: Signaled when the EVSE is not authorized for charging (anymore)
|   Enabled: Signaled when the EVSE is enabled (e.g. after an enable command)
|   Disabled: Signaled when the EVSE is disabled (e.g. after a disable command)
|   SessionStarted: Signaled when a session has been started. A session has been started either when an EV is plugged in or the user has been authorized to start a transaction (e.g. after an authorize command)
|   AuthRequired: Signaled when an EVSE needs authorization to start a transaction
|   TransactionStarted: Signaled when a transaction has been started. Transaction starts at the point that all conditions for charging are met: EV is connected and user has been authorized
|   PrepareCharging: EVSE started to prepare for charging. DC: CableCheck, PreCharge, PowerDelivery. AC: wait for the car to proceed to state C/D
|   ChargingStarted: DC: CurrentDemand has started. AC: Auth is ok and car requested power (state C/D)
|   ChargingPausedEV: Signaled when charging is paused by the EV
|   ChargingPausedEVSE: Signaled when charging is paused by the EVSE
|   ChargingResumed: Charging has resumed from a pause
|   StoppingCharging: EVSE has started to stop the charging process. DC: CurrentDemand has finished, now doing WeldingCheck etc, AC: Wait for car to return to state B or A
|   ChargingFinished: Charging is finished. Essentially the same as TransactionFinished, but emitted for clarity
|   TransactionFinished: Signaled when the transaction finished. Transaction finishes at the point where one of the preconditions for charging irrevocably becomes false: When a user swipes to stop the transaction and the stop is authorized.
|   SessionFinished: Session finishes at the point that the EVSE is available again (no cable plugged)
|   ReservationStart: Signaled when a reservation starts
|   ReservationEnd: Signaled when a reservation ends
|   ReplugStarted: Signaled when the EVSE Manager virtually replugs without interrupting the session or transaction
|   ReplugFinished: Signaled when the virtual replug process has finished
|   PluginTimeout: Signaled when an EV has been Plugged in but no authorization is present within specified ConnectionTimeout
|   SessionResumed: Signaled when a session is resumed at startup (e.g. because of previous powerloss)
|  enum:
|    - Authorized
|    - Deauthorized
|    - Enabled
|    - Disabled
|    - SessionStarted
|    - AuthRequired
|    - TransactionStarted
|    - PrepareCharging
|    - ChargingStarted
|    - ChargingPausedEV
|    - ChargingPausedEVSE
|    - WaitingForEnergy
|    - ChargingResumed
|    - StoppingCharging
|    - ChargingFinished
|    - TransactionFinished
|    - SessionFinished
|    - ReservationStart
|    - ReservationEnd
|    - ReplugStarted
|    - ReplugFinished
|    - PluginTimeout
|    - SwitchingPhases
|    - SessionResumed

.. _evse_manager-SessionStarted:

| **SessionStarted**:*object* 
|  Data for the SessionStarted event
|  properties:
|   **reason**:*string* <required> (:ref:`evse_manager-StartSessionReason <evse_manager-StartSessionReason>`)
|    Reason for session start
|    **There is an extended definition for this object** :ref:`here <evse_manager-StartSessionReason>`.
|   **id_tag**:*object* <optional> (:ref:`authorization-ProvidedIdToken <authorization-ProvidedIdToken>`)
|    The id tag assigned to this session
|    **There is an extended definition for this object** :ref:`here <authorization-ProvidedIdToken>`.
|   **meter_value**:*object* <required> (:ref:`powermeter-Powermeter <powermeter-Powermeter>`)
|    Exported meter value
|    **There is an extended definition for this object** :ref:`here <powermeter-Powermeter>`.
|   **signed_meter_value**:*object* <optional> (:ref:`units_signed-SignedMeterValue <units_signed-SignedMeterValue>`)
|    The signed meter value report of the started session
|    **There is an extended definition for this object** :ref:`here <units_signed-SignedMeterValue>`.
|   **reservation_id**:*integer* <optional>
|    Id of the reservation
|   **logging_path**:*string* <optional>
|    File system path where additional log files are stored, such as event logs, raw ethernet dumps, ocpp session logs etc. Filenames should start with "incomplete-" when they are not finished yet, this allows other process to wait for the completion after the SessionFinished event.

.. _evse_manager-SessionFinished:

| **SessionFinished**:*object* 
|  Data for the SessionFinished event
|  properties:
|   **meter_value**:*object* <required> (:ref:`powermeter-Powermeter <powermeter-Powermeter>`)
|    Exported meter value
|    **There is an extended definition for this object** :ref:`here <powermeter-Powermeter>`.

.. _evse_manager-TransactionStarted:

| **TransactionStarted**:*object* 
|  Data for the TransactionStarted event
|  properties:
|   **id_tag**:*object* <required> (:ref:`authorization-ProvidedIdToken <authorization-ProvidedIdToken>`)
|    The id tag assigned to this transaction
|    **There is an extended definition for this object** :ref:`here <authorization-ProvidedIdToken>`.
|   **meter_value**:*object* <required> (:ref:`powermeter-Powermeter <powermeter-Powermeter>`)
|    Exported meter value
|    **There is an extended definition for this object** :ref:`here <powermeter-Powermeter>`.
|   **signed_meter_value**:*object* <optional> (:ref:`units_signed-SignedMeterValue <units_signed-SignedMeterValue>`)
|    The signed meter value report of the started transaction
|    **There is an extended definition for this object** :ref:`here <units_signed-SignedMeterValue>`.
|   **reservation_id**:*integer* <optional>
|    Id of the reservation

.. _evse_manager-TransactionFinished:

| **TransactionFinished**:*object* 
|  Data for TransactionFinished event
|  properties:
|   **meter_value**:*object* <required> (:ref:`powermeter-Powermeter <powermeter-Powermeter>`)
|    Transaction finished meter value
|    **There is an extended definition for this object** :ref:`here <powermeter-Powermeter>`.
|   **start_signed_meter_value**:*object* <optional> (:ref:`units_signed-SignedMeterValue <units_signed-SignedMeterValue>`)
|    The starting signed meter value report of the stopped transaction. If not included in the `signed_meter_value` object, it must be included here.
|    **There is an extended definition for this object** :ref:`here <units_signed-SignedMeterValue>`.
|   **signed_meter_value**:*object* <optional> (:ref:`units_signed-SignedMeterValue <units_signed-SignedMeterValue>`)
|    The signed meter value report of the stopped transaction
|    **There is an extended definition for this object** :ref:`here <units_signed-SignedMeterValue>`.
|   **reason**:*string* <optional> (:ref:`evse_manager-StopTransactionReason <evse_manager-StopTransactionReason>`)
|    Reason for stopping transaction
|    **There is an extended definition for this object** :ref:`here <evse_manager-StopTransactionReason>`.
|   **id_tag**:*object* <optional> (:ref:`authorization-ProvidedIdToken <authorization-ProvidedIdToken>`)
|    Id tag that was used to stop the transaction. Only present if transaction was stopped locally.
|    **There is an extended definition for this object** :ref:`here <authorization-ProvidedIdToken>`.

.. _evse_manager-ChargingStateChangedEvent:

| **ChargingStateChangedEvent**:*object* 
|  Context for ChargingStateChanged event
|  properties:
|   **meter_value**:*object* <required> (:ref:`powermeter-Powermeter <powermeter-Powermeter>`)
|    Exported meter value
|    **There is an extended definition for this object** :ref:`here <powermeter-Powermeter>`.

.. _evse_manager-AuthorizationEvent:

| **AuthorizationEvent**:*object* 
|  Context for authorization event (Authorized or Deauthorized)
|  properties:
|   **meter_value**:*object* <required> (:ref:`powermeter-Powermeter <powermeter-Powermeter>`)
|    Exported meter value
|    **There is an extended definition for this object** :ref:`here <powermeter-Powermeter>`.

.. _evse_manager-EnableDisableSource:

| **EnableDisableSource**:*object* 
|  Source of a Enable or Disable command/event
|  properties:
|   **enable_source**:*string* <required>
|    Specifies the source
|    enum:
|      - Unspecified
|      - LocalAPI
|      - LocalKeyLock
|      - ServiceTechnician
|      - RemoteKeyLock
|      - MobileApp
|      - FirmwareUpdate
|      - CSMS
|   **enable_state**:*string* <required>
|    Specifies the state for this entry
|    enum:
|      - Unassigned
|      - Disable
|      - Enable
|   **enable_priority**:*integer* <required>
|    Priority of this entry. The highest priority is 0.

.. _evse_manager-SessionEvent:

| **SessionEvent**:*object* 
|  Emits all events related to sessions
|  properties:
|   **uuid**:*string* <required>
|    An EVSE generated UUID for this session, can be used e.g. for database storage.
|   **timestamp**:*string* <required>
|    Session start time in RFC3339 format
|    format:date-time
|   **connector_id**:*integer* <optional>
|    Id of the connector of this EVSE. If the connector_id is not specified, its assumed to be 1
|   **event**:*string* <required> (:ref:`evse_manager-SessionEventEnum <evse_manager-SessionEventEnum>`)
|    Event enum. For some events an additional object is set, see below.
|    **There is an extended definition for this object** :ref:`here <evse_manager-SessionEventEnum>`.
|   **session_started**:*object* <optional> (:ref:`evse_manager-SessionStarted <evse_manager-SessionStarted>`)
|    data for SessionStarted event
|    **There is an extended definition for this object** :ref:`here <evse_manager-SessionStarted>`.
|   **session_finished**:*object* <optional> (:ref:`evse_manager-SessionFinished <evse_manager-SessionFinished>`)
|    data for the SessionFinished event
|    **There is an extended definition for this object** :ref:`here <evse_manager-SessionFinished>`.
|   **transaction_started**:*object* <optional> (:ref:`evse_manager-TransactionStarted <evse_manager-TransactionStarted>`)
|    data for TransactionStarted event
|    **There is an extended definition for this object** :ref:`here <evse_manager-TransactionStarted>`.
|   **transaction_finished**:*object* <optional> (:ref:`evse_manager-TransactionFinished <evse_manager-TransactionFinished>`)
|    data for TransactionFinished event that happens when car is plugged out
|    **There is an extended definition for this object** :ref:`here <evse_manager-TransactionFinished>`.
|   **charging_state_changed_event**:*object* <optional> (:ref:`evse_manager-ChargingStateChangedEvent <evse_manager-ChargingStateChangedEvent>`)
|    Data for ChargingStateChangedEvent. Shall be set for the following SessionEventEnums: ChargingStarted, ChargingResumed, ChargingPausedEV, Charging
|    **There is an extended definition for this object** :ref:`here <evse_manager-ChargingStateChangedEvent>`.
|   **authorization_event**:*object* <optional> (:ref:`evse_manager-AuthorizationEvent <evse_manager-AuthorizationEvent>`)
|    Data for Authorization event. Shall be set for the following SessionEventEnums: Authorized, Deauthorized
|    **There is an extended definition for this object** :ref:`here <evse_manager-AuthorizationEvent>`.
|   **source**:*object* <optional> (:ref:`evse_manager-EnableDisableSource <evse_manager-EnableDisableSource>`)
|    Additional data for Enabled/Disabled events. Specifies the source of the command that changed the state.
|    **There is an extended definition for this object** :ref:`here <evse_manager-EnableDisableSource>`.

.. _evse_manager-Limits:

| **Limits**:*object* 
|  Limits of this EVSE
|  properties:
|   **uuid**:*string* <optional>
|    This module's UUID for global identification
|   **max_current**:*number* <required>
|    Instantaneous maximum current available to car
|   **nr_of_phases_available**:*integer* <required>
|    Instantaneous phase count available to car

.. _evse_manager-EVInfo:

| **EVInfo**:*object* 
|  Information about the connected EV if available
|  properties:
|   **soc**:*number* <required>
|    State of charge of the vehicle's battery in percent
|   **present_voltage**:*number* <required>
|    Current voltage of the vehicles battery [V]
|   **present_current**:*number* <required>
|    Current current of the vehicles battery [A]
|   **target_voltage**:*number* <required>
|    Target voltage that the vehicle requested [V]
|   **target_current**:*number* <required>
|    Target current that the vehicle requested [A]
|   **maximum_current_limit**:*number* <required>
|    Maximum current that the vehicle supports [A]
|   **minimum_current_limit**:*number* <required>
|    Charging below this limit is not energy efficient [A]
|   **maximum_voltage_limit**:*number* <required>
|    Maximum voltage that the vehicle supports [V]
|   **maximum_power_limit**:*number* <required>
|    Maximum power that the vehicle supports [W]
|   **estimated_time_full**:*string* <required>
|    Estimated time when the vehicle is fully charged
|    format:date-time
|   **departure_time**:*string* <required>
|    Time when the vehicle intends to depart (If set by the user)
|    format:date-time
|   **estimated_time_bulk**:*string* <required>
|    Estimated time when the vehicle finished bulk charging (e.g. 80%)
|    format:date-time
|   **evcc_id**:*string* <required>
|    EVCC ID (typically MAC address)
|    pattern:^[A-Fa-f0-9]{2}(:[A-Fa-f0-9]{2}){5}$
|   **remaining_energy_needed**:*number* <required>
|    Remaining energy needed to fulfill charging goal [Wh]
|   **battery_capacity**:*number* <required>
|    Vehicle's battery capacity [Wh]
|   **battery_full_soc**:*number* <required>
|    SoC which the vehicle considers fully charged [%]
|   **battery_bulk_soc**:*number* <required>
|    SoC which the vehicle considers bulk charging reached [%]

.. _evse_manager-CarManufacturer:

| **CarManufacturer**:*string* 
|  Enum type for car manufacturers derived from MAC address. May be different from actual brand, so e.g. Skoda falls under Volkswagen_Group.
|  enum:
|    - VolkswagenGroup
|    - Tesla
|    - Unknown

.. _evse_manager-Connector:

| **Connector**:*object* 
|  Type for a connector which is an independently operated and managed electrical outlet of an EVSE. It corresponds to a single physical connector
|  properties:
|   **id**:*integer* <required>
|    Id of the connector. Connectors should be numbered starting with 1 counting upwards
|   **type**:*string* <optional> (:ref:`evse_manager-ConnectorTypeEnum <evse_manager-ConnectorTypeEnum>`)
|    Type of the connector
|    **There is an extended definition for this object** :ref:`here <evse_manager-ConnectorTypeEnum>`.

.. _evse_manager-ConnectorTypeEnum:

| **ConnectorTypeEnum**:*string* 
|  Type of a physical connector cCCS1: Combined Charging System 1 a.k.a. Combo 1 cCCS2: Combined Charging System 2 a.k.a. Combo 2 cG105: JARI G105-1993 a.k.a. CHAdeMO cTesla: Tesla Connector cType1: IEC62196-2 Type 1 connector a.k.a. J1772 cType2: IEC62196-2 Type 2 connector a.k.a. Mennekes connector s309_1P_16A: 16A 1 phase IEC60309 socket s309_1P_32A: 32A 1 phase IEC60309 socket s309_3P_16A: 16A 3 phase IEC60309 socket s309_3P_32A: 32A 3 phase IEC60309 socket sBS1361: UK domestic socket a.k.a. 13Amp sCEE-7_7: CEE 7/7 16A socket a.k.a Schuko sType2: IEC62196-2 Type 2 socket a.k.a. Mennekes connector sType3: IEC62196-2 Type 2 socket a.k.a. Scame Unknown: Unknown
|  enum:
|    - cCCS1
|    - cCCS2
|    - cG105
|    - cTesla
|    - cType1
|    - cType2
|    - s309_1P_16A
|    - s309_1P_32A
|    - s309_3P_16A
|    - s309_3P_32A
|    - sBS1361
|    - sCEE_7_7
|    - sType2
|    - sType3
|    - Unknown

.. _evse_manager-Evse:

| **Evse**:*object* 
|  Type that defines properties of an EVSE including its connectors
|  properties:
|   **id**:*integer* <required>
|    ID of the EVSE
|   **connectors**:*array* <required>
|    List of connectors of this EVSE
|    **array_item**:*object*  (:ref:`evse_manager-Connector <evse_manager-Connector>`)
|     A single connector
|     **There is an extended definition for this object** :ref:`here <evse_manager-Connector>`.
| 
