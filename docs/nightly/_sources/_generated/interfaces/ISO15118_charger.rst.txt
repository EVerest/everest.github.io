
.. _everest_interfaces_ISO15118_charger:


################
ISO15118_charger
################

| This interface defines a ISO15118 charger.


*********
Variables
*********
| **require_auth_eim**:*null* 
|  An EIM authorization is requiered
| **require_auth_pnc**:*object*  (:ref:`authorization-ProvidedIdToken <authorization-ProvidedIdToken>`)
|  The EVCC provides the payment details for a PnC authorization by sending the signature certificate chain and eMAID.
|  **There is an extended definition for this object** :ref:`here <authorization-ProvidedIdToken>`.
| **ac_close_contactor**:*null* 
|  The contactor should be closed
| **ac_open_contactor**:*null* 
|  The contactor should be opened
| **start_cable_check**:*null* 
|  The charger should now start a cable check
| **dc_open_contactor**:*null* 
|  The contactor should be opened
| **v2g_setup_finished**:*null* 
|  v2g_setup_finished from ISO15118-3. Trigger when EV sends a PowerDeliveryReq message with ChargeProgess equals Start or Stop
| **current_demand_started**:*null* 
|  The charging process has started and the EV wants to be charged
| **current_demand_finished**:*null* 
|  The charging process was finished
| **sae_bidi_mode_active**:*null* 
|  The SAE J2847 bidi mode is active
| **evcc_id**:*string* 
|  Specifies the EVs identification in a readable format. It contains the MAC address of the EVCC in uppercase
|  pattern:^[A-F0-9]{2}(:[A-F0-9]{2}){5}$
| **selected_payment_option**:*string*  (:ref:`iso15118_charger-PaymentOption <iso15118_charger-PaymentOption>`)
|  This element is used for indicating the payment type
|  **There is an extended definition for this object** :ref:`here <iso15118_charger-PaymentOption>`.
| **requested_energy_transfer_mode**:*string*  (:ref:`iso15118_charger-EnergyTransferMode <iso15118_charger-EnergyTransferMode>`)
|  Selected energy transfer mode for charging that is requested by the EVCC.
|  **There is an extended definition for this object** :ref:`here <iso15118_charger-EnergyTransferMode>`.
| **departure_time**:*string* 
|  Optional: [RFC3339 UTC] This element is used to indicate when the vehicle intends to finish the charging process
|  format:date-time
| **ac_eamount**:*number* 
|  [Wh] Amount of energy reflecting the EV's estimate how much energy is needed to fulfill the user configured charging goal for the current charging session
| **ac_ev_max_voltage**:*number* 
|  [V] The RMS of the maximal nominal voltage the vehicle can accept, measured between one phase and neutral
| **ac_ev_max_current**:*number* 
|  [A] Maximum current supported by the EV per phase
| **ac_ev_min_current**:*number* 
|  [A] EVMinCurrent is used to indicate to the SECC that charging below this minimum is not energy/cost efficient for the EV
| **dc_ev_energy_capacity**:*number* 
|  Optional: [Wh] Energy capacity of the EV
| **dc_ev_energy_request**:*number* 
|  Optional: [Wh] Amount of energy the EV requests from the EVSE
| **dc_full_soc**:*number* 
|  Optional: [%] SOC at which the EV considers the battery to be fully charged
| **dc_bulk_soc**:*number* 
|  Optional: [%] SOC at which the EV considers a fast charge process to end
| **dc_ev_status**:*object*  (:ref:`iso15118_charger-DcEvStatus <iso15118_charger-DcEvStatus>`)
|  Current status of the EV
|  **There is an extended definition for this object** :ref:`here <iso15118_charger-DcEvStatus>`.
| **dc_bulk_charging_complete**:*boolean* 
|  Optional: If set to TRUE, the EV indicates that bulk charge (approx. 80% SOC) is complete
| **dc_charging_complete**:*boolean* 
|  Optional: If set to TRUE, the EV indicates that full charge (100% SOC) is complete
| **dc_ev_target_voltage_current**:*object*  (:ref:`iso15118_charger-DcEvTargetValues <iso15118_charger-DcEvTargetValues>`)
|  Target voltage and current requested by the EV
|  **There is an extended definition for this object** :ref:`here <iso15118_charger-DcEvTargetValues>`.
| **dc_ev_maximum_limits**:*object*  (:ref:`iso15118_charger-DcEvMaximumLimits <iso15118_charger-DcEvMaximumLimits>`)
|  Maximum Values (current, power and voltage) supported and allowed by the EV
|  **There is an extended definition for this object** :ref:`here <iso15118_charger-DcEvMaximumLimits>`.
| **dc_ev_remaining_time**:*object*  (:ref:`iso15118_charger-DcEvRemainingTime <iso15118_charger-DcEvRemainingTime>`)
|  Estimated or calculated time until bulk and full charge is complete
|  **There is an extended definition for this object** :ref:`here <iso15118_charger-DcEvRemainingTime>`.
| **certificate_request**:*object*  (:ref:`iso15118_charger-RequestExiStreamSchema <iso15118_charger-RequestExiStreamSchema>`)
|  The vehicle requests the SECC to deliver the certificate that belong  to the currently valid contract of the vehicle. Response will be reported async via  set_Get_Certificate_Response
|  **There is an extended definition for this object** :ref:`here <iso15118_charger-RequestExiStreamSchema>`.
| **dlink_terminate**:*null* 
|  Terminate the data link and become UNMATCHED.
| **dlink_error**:*null* 
|  Terminate the data link and restart the matching process.
| **dlink_pause**:*null* 
|  Request power saving mode, while staying MATCHED.
| **ev_app_protocol**:*object*  (:ref:`iso15118_charger-AppProtocols <iso15118_charger-AppProtocols>`)
|  Debug_Lite - This request message provides a list of charging protocols supported by the EVCC
|  **There is an extended definition for this object** :ref:`here <iso15118_charger-AppProtocols>`.
| **v2g_messages**:*object*  (:ref:`iso15118_charger-V2gMessages <iso15118_charger-V2gMessages>`)
|  Debug - This element contains all V2G elements and should be used for debug purposes only
|  **There is an extended definition for this object** :ref:`here <iso15118_charger-V2gMessages>`.
| **selected_protocol**:*string* 
|  Debug - Contains the selected protocol

********
Commands
********
| **setup**:*void*
|  At startup all necessary info should be sent to the module once.
|  **evse_id**:*object* <required> (:ref:`iso15118_charger-EVSEID <iso15118_charger-EVSEID>`)
|   Set an ID that uniquely identifies the EVSE and the power outlet the vehicle is connected to 
|   **There is an extended definition for this object** :ref:`here <iso15118_charger-EVSEID>`.
|  **supported_energy_transfer_modes**:*array* <required>
|   Available energy transfer modes supported by the EVSE
|   **array_item**:*string*  (:ref:`iso15118_charger-EnergyTransferMode <iso15118_charger-EnergyTransferMode>`)
|    The different energy modes supported by the SECC
|    **There is an extended definition for this object** :ref:`here <iso15118_charger-EnergyTransferMode>`.
| 
|  **sae_j2847_mode**:*string* <required> (:ref:`iso15118_charger-SaeJ2847BidiMode <iso15118_charger-SaeJ2847BidiMode>`)
|   Charger is supporting SAE J2847 V2G/V2H version
|   **There is an extended definition for this object** :ref:`here <iso15118_charger-SaeJ2847BidiMode>`.
|  **debug_mode**:*boolean* <required>
|   Enable/Disable debug mode
| **set_charging_parameters**:*void*
|  At startup, set the the charging parameters at least once. May be updated later on. If a charging session is currently active, some updated values may only be used for the next charging session.
|  **physical_values**:*object* <required> (:ref:`iso15118_charger-SetupPhysicalValues <iso15118_charger-SetupPhysicalValues>`)
|   Set up initial physical values for a AC or DC charging session
|   **There is an extended definition for this object** :ref:`here <iso15118_charger-SetupPhysicalValues>`.
| **session_setup**:*void*
|  At each session start this info should be sent to the module.
|  **payment_options**:*array* <required>
|   Providing a list of payment options to the EVCC
|   **array_item**:*string*  (:ref:`iso15118_charger-PaymentOption <iso15118_charger-PaymentOption>`)
|    These are the payment options a SECC offers to the EVCC
|    **There is an extended definition for this object** :ref:`here <iso15118_charger-PaymentOption>`.
| 
|  **supported_certificate_service**:*boolean* <required>
|   The charger supports the certificate installation/update service and has a connection to an SA for this purpose
| **certificate_response**:*void*
|  This message is an async response to a previously published certificate_request. The new/updated Contract Certificate (including the certificate chain) and the corresponding encrypted private key are sent via the SECC to the EVCC.
|  **exi_stream_status**:*object* <required> (:ref:`iso15118_charger-ResponseExiStreamStatus <iso15118_charger-ResponseExiStreamStatus>`)
|   The response raw EXI stream and the status from the CSMS
|   **There is an extended definition for this object** :ref:`here <iso15118_charger-ResponseExiStreamStatus>`.
| **authorization_response**:*void*
|  This message is an async response to a previously published require_auth_eim or require_auth_pnc. The SECC informs the EVCC whether the authorization is accecpted or not.
|  **authorization_status**:*string* <required> (:ref:`authorization-AuthorizationStatus <authorization-AuthorizationStatus>`)
|   Authorization status of the ID Token
|   **There is an extended definition for this object** :ref:`here <authorization-AuthorizationStatus>`.
|  **certificate_status**:*string* <required> (:ref:`authorization-CertificateStatus <authorization-CertificateStatus>`)
|   Certificate status information
|   **There is an extended definition for this object** :ref:`here <authorization-CertificateStatus>`.
| **ac_contactor_closed**:*void*
|  This message is an async response to a previously published ac_close_contactor or ac_open_contactor.
|  **status**:*boolean* <required>
|   Set to true when contactor is closed, false when contactor is open
| **dlink_ready**:*void*
|  Signals dlink_ready from SLAC layer according to ISO15118-3
|  **value**:*boolean* <required>
|   Set to true when link becomes ready, false when the link is terminated
| **cable_check_finished**:*void*
|  Cable check is finished, voltage is under 20V and insulation resistor on the cable is alright
|  **status**:*boolean* <required>
|   Set to true when cable check is okay
| **receipt_is_required**:*void*
|  This element is used by the SECC to indicate that the EVCC is required to send a MeteringReceiptReq message for the purpose of signing the meter info record.
|  **receipt_required**:*boolean* <required>
|   Set to true when receipt is required, set to false when not
| **stop_charging**:*void*
|  Stops the charging process
|  **stop**:*boolean* <required>
|   Set to true when to stop, set to false when to continue
| **update_ac_max_current**:*void*
|  Update the maximum allowed line current restriction per phase. Call at least once during start up.
|  **max_current**:*number* <required>
|   Max current in A
| **update_dc_maximum_limits**:*void*
|  Update the maximum limits. Call at least once during start up.
|  **maximum_limits**:*object* <required> (:ref:`iso15118_charger-DcEvseMaximumLimits <iso15118_charger-DcEvseMaximumLimits>`)
|   Maximum values (current, power and voltage) the EVSE can deliver
|   **There is an extended definition for this object** :ref:`here <iso15118_charger-DcEvseMaximumLimits>`.
| **update_dc_minimum_limits**:*void*
|  Update the minimum limits. Call at least once during start up.
|  **minimum_limits**:*object* <required> (:ref:`iso15118_charger-DcEvseMinimumLimits <iso15118_charger-DcEvseMinimumLimits>`)
|   Minimum values (current and voltage) the EVSE can deliver
|   **There is an extended definition for this object** :ref:`here <iso15118_charger-DcEvseMinimumLimits>`.
| **update_isolation_status**:*void*
|  Update the isolation condition
|  **isolation_status**:*string* <required> (:ref:`iso15118_charger-IsolationStatus <iso15118_charger-IsolationStatus>`)
|   Result of the isolation monitoring
|   **There is an extended definition for this object** :ref:`here <iso15118_charger-IsolationStatus>`.
| **update_dc_present_values**:*void*
|  Update the present values from the DC powersupply
|  **present_voltage_current**:*object* <required> (:ref:`iso15118_charger-DcEvsePresentVoltageCurrent <iso15118_charger-DcEvsePresentVoltageCurrent>`)
|   Present voltage and current
|   **There is an extended definition for this object** :ref:`here <iso15118_charger-DcEvsePresentVoltageCurrent>`.
| **update_meter_info**:*void*
|  Update meter info
|  **powermeter**:*object* <required> (:ref:`powermeter-Powermeter <powermeter-Powermeter>`)
|   Includes the meterInfo record containing the latest meter reading and other meter relevant data
|   **There is an extended definition for this object** :ref:`here <powermeter-Powermeter>`.
| **send_error**:*void*
|  An error has happend. Send this error to inform the EV.
|  **error**:*string* <required> (:ref:`iso15118_charger-EvseError <iso15118_charger-EvseError>`)
|   The EVSE error enum
|   **There is an extended definition for this object** :ref:`here <iso15118_charger-EvseError>`.
| **reset_error**:*void*
|  Reset all errors
