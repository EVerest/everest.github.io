
.. _everest_interfaces_ISO15118_charger:


################
ISO15118_charger
################

| This interface defines a ISO15118 charger.


*********
Variables
*********
| **Require_Auth_EIM**:*null*
|  An EIM authorization is requiered
| **Require_Auth_PnC**:*null*
|  An PnC authorization is requiered
| **Require_EVSEIsolationCheck**:*null*
|  An insulation check of the DC cable of the EVSE is necessary
| **AC_Close_Contactor**:*boolean*
|  If true, the contactor should be closed
| **AC_Open_Contactor**:*boolean*
|  If true, the contactor should be opened
| **V2G_Setup_Finished**:*null*
|  V2G_Setup_Finished from ISO15118-3. Trigger when EV sends a PowerDeliveryReq message with ChargeProgess equals Start or Stop
| **EVCCIDD**:*string*
|  Specifies the EVs identification in a readable format. It contains the MAC address of the EVCC
|  pattern:
| **SelectedPaymentOption**:*string*
|  This element is used for indicating the payment type
|  enum: Contract, ExternalPayment
| **RequestedEnergyTransferMode**:*string*
|  Selected energy transfer mode for charging that is requested by the EVCC.
|  enum: AC_single_phase_core, AC_three_phase_core, DC_core, DC_extended, DC_combo_core, DC_unique
| **DepartureTime**:*string*
|  Optional: [RFC3339 UTC] This element is used to indicate when the vehicle intends to finish the charging process
|  format:
| **AC_EAmount**:*number*
|  [Wh] Amount of energy reflecting the EV's estimate how much energy is needed to fulfill the user configured charging goal for the current charging session
| **AC_EVMaxVoltage**:*number*
|  [V] The RMS of the maximal nominal voltage the vehicle can accept, measured between one phase and neutral
| **AC_EVMaxCurrent**:*number*
|  [A] Maximum current supported by the EV per phase
| **AC_EVMinCurrent**:*number*
|  [A] EVMinCurrent is used to indicate to the SECC that charging below this minimum is not energy/cost efficient for the EV
| **DC_EVEnergyCapacity**:*number*
|  Optional: [Wh] Energy capacity of the EV
| **DC_EVEnergyRequest**:*number*
|  Optional: [Wh] Amount of energy the EV requests from the EVSE
| **DC_FullSOC**:*number*
|  Optional: [%] SOC at which the EV considers the battery to be fully charged
| **DC_BulkSOC**:*number*
|  Optional: [%] SOC at which the EV considers a fast charge process to end
| **DC_EVReady**:*boolean*
|  If set to TRUE, the EV is ready to charge
| **DC_EVErrorCode**:*string*
|  Indicates the EV internal status
|  enum: NO_ERROR, FAILED_RESSTemperatureInhibit, FAILED_EVShiftPosition, FAILED_ChargerConnectorLockFault, FAILED_EVRESSMalfunction, FAILED_ChargingCurrentdifferentia, FAILED_ChargingVoltageOutOfRange, Reserved_A, Reserved_B, Reserved_C, FAILED_ChargingSystemIncompatibility, NoData
| **DC_EVRESSSOC**:*number*
|  State of charge of the EVs battery (RESS)
| **EV_ChargingSession**:*string*
|  ChargingSession indicates the intention of the EVCC to either pause or terminate a V2G Communication Session
|  enum: Terminate, Pause
| **DC_BulkChargingComplete**:*boolean*
|  Optional: If set to TRUE, the EV indicates that bulk charge (approx. 80% SOC) is complete
| **DC_ChargingComplete**:*boolean*
|  Optional: If set to TRUE, the EV indicates that full charge (100% SOC) is complete
| **DC_EVTargetVoltage**:*number*
|  [V] Target Voltage requested by EV
| **DC_EVTargetCurrent**:*number*
|  [A] Current demanded by EV
| **DC_EVMaximumCurrentLimit**:*number*
|  [A] Maximum current supported and allowed by the EV
| **DC_EVMaximumPowerLimit**:*number*
|  Optional: [W] Maximum power supported and allowed by the EV
| **DC_EVMaximumVoltageLimit**:*number*
|  [V] Maximum voltage supported and allowed by the EV
| **EV_RemainingTimeToFullSoC**:*string*
|  [RFC3339 UTC] Estimated or calculated time until full charge (100% SOC) is complete
|  format:
| **EV_RemainingTimeToBulkSoC**:*string*
|  [RFC3339 UTC] Estimated or calculated time until bulk charge (approx. 80% SOC) is complete
|  format:
| **EV_AppProtocol**:*array*
|  Debug_Lite - This request message provides a list of charging protocols supported by the EVCC
|  items:
|   description:
|   type:
|   properties:
|    ProtocolNamespace:
|     description:
|     type:
|    VersionNumberMajor:
|     description:
|     type:
|    VersionNumberMinor:
|     description:
|     type:
|    SchemaID:
|     description:
|     type:
|    Priority:
|     description:
|     type:
| **V2G_Messages**:*object*
|  Debug - This element contains all V2G elements and should be used for debug purposes only
|  properties:
|   **V2G_Message_ID**:*string*
|    This element contains the id of the v2g message body
|    enum: SupportedAppProtocolReq, SupportedAppProtocolRes, SessionSetupReq, SessionSetupRes, ServiceDiscoveryReq, ServiceDiscoveryRes, ServiceDetailReq, ServiceDetailRes, PaymentServiceSelectionReq, PaymentServiceSelectionRes, AuthorizationReq, AuthorizationRes, ChargeParameterDiscoveryReq, ChargeParameterDiscoveryRes, ChargingStatusReq, ChargingStatusRes, PowerDeliveryReq, PowerDeliveryRes, CableCheckReq, CableCheckRes, PreChargeReq, PreChargeRes, CurrentDemandReq, CurrentDemandRes, WeldingDetectionReq, WeldingDetectionRes, SessionStopReq, SessionStopRes
|   **V2G_Message_XML**:*string*
|    Contains the decoded EXI stream as V2G message XML file
|   **V2G_Message_JSON**:*string*
|    Contains the decoded EXI stream as V2G message JSON file
|   **V2G_Message_EXI_Hex**:*string*
|    Contains the EXI stream as hex string
|   **V2G_Message_EXI_Base64**:*string*
|    Contains the EXI stream as base64 string

********
Commands
********
| **set_EVSEID**:*void*
|  One Time Setup at Boot - Set an ID that uniquely identifies the EVSE and the power outlet the vehicle is connected to
|  **EVSEID**:*string*
|   EVSE ID
| **set_PaymentOptions**:*void*
|  One Time Setup at Boot - Providing a list of payment options to the EVCC
|  **PaymentOptions**:*array*
|   An array of payment options
|   items:
|    description:
|    type:
|    enum: Contract, ExternalPayment
| **set_SupportedEnergyTransferMode**:*void*
|  One Time Setup at Boot - Available energy transfer modes supported by the EVSE
|  **SupportedEnergyTransferMode**:*array*
|   An array of supported engery modes
|   items:
|    description:
|    type:
|    enum: AC_single_phase_core, AC_three_phase_core, DC_core, DC_extended, DC_combo_core, DC_unique
| **set_AC_EVSENominalVoltage**:*void*
|  One Time Setup at Boot - Set Line voltage supported by the EVSE. This is the voltage measured between one phases and neutral
|  **EVSENominalVoltage**:*number*
|   [V] Nominal Voltage
| **set_DC_EVSECurrentRegulationTolerance**:*void*
|  One Time Setup at Boot (Optional) - Set the absolute magnitude of the regulation tolerance of the EVSA
|  **EVSECurrentRegulationTolerance**:*number*
|   Set EVSECurrentRegulationTolerance [A]
| **set_DC_EVSEPeakCurrentRipple**:*void*
|  One Time Setup at Boot - Set the peak-to-peak magnitude of the current ripple of the EVSE
|  **EVSEPeakCurrentRipple**:*number*
|   Set EVSEPeakCurrentRipple [A]
| **set_ReceiptRequired**:*void*
|  One Time Setup at Boot (Optional) - This element is used by the SECC to indicate that the EVCC is required to send a MeteringReceiptReq message for the purpose of signing the meter info record
|  **ReceiptRequired**:*boolean*
|   True: Receipt is required, False: Receipt is not required
| **set_FreeService**:*void*
|  On Session Setup - Set FreeService so the EVCC can use the service free of charge or not
|  **FreeService**:*boolean*
|   True: Charging is free, False: Charging is not free
| **set_EVSEEnergyToBeDelivered**:*void*
|  On Session Setup (Optional) - Set the Amount of energy to be delivered by the EVSE
|  **EVSEEnergyToBeDelivered**:*number*
|   Set EVSEEnergyToBeDelivered [Wh]
| **enable_debug_mode**:*void*
|  On Session Setup - Set different modes for the debug mode.
|  **debug_mode**:*string*
|   The various debug modes
|   enum: None, Lite, Full
| **set_Auth_Okay_EIM**:*void*
|  Response on Require_Auth_EIM - Set this element if the authorization was either successful or unsuccessful
|  **auth_okay_eim**:*boolean*
|   True: Authentication is okay
| **set_Auth_Okay_PnC**:*void*
|  Response on Require_Auth_PnC - Set this element if the authorization was either successful or unsuccessful
|  **auth_okay_pnc**:*boolean*
|   True: Authentication is okay
| **set_FAILED_ContactorError**:*void*
|  Any Time - Set this error when the contactor is opened or closed at the wrong moment
|  **ContactorError**:*boolean*
|   True: ContactError happend
| **set_RCD_Error**:*void*
|  Any Time - Indicates the current status of the Residual Current Device (RCD)
|  **RCD**:*boolean*
|   If RCD is equal to true, the RCD has detected an error. If RCD is equal to false, the RCD has not detected an error
| **stop_charging**:*void*
|  During charging - Stops the charging process
|  **stop_charging**:*boolean*
|   True: Stop, False: Continue
| **set_DC_EVSEPresentVoltage**:*void*
|  Starting from PowerDelivery to WeldingDetection - Set the present voltage for the EVSE
|  **EVSEPresentVoltage**:*number*
|   [V] Output voltage of the EVSE as defined in IEC CDV 61851-23
| **set_DC_EVSEPresentCurrent**:*void*
|  During charging - Set the present current for the EVSE
|  **EVSEPresentCurrent**:*number*
|   [A] Present output current of the EVSE
| **set_AC_EVSEMaxCurrent**:*void*
|  ChargeParameterDiscovery and during charging - Set the Maximum allowed line current restriction per phase
|  **EVSEMaxCurrent**:*number*
|   [A] Max current
| **set_DC_EVSEMaximumCurrentLimit**:*void*
|  ChargeParameterDiscovery and during charging - Set the maximum current for the EVSE
|  **EVSEMaximumCurrentLimit**:*number*
|   [A] Maximum current the EVSE can deliver
| **set_DC_EVSEMaximumPowerLimit**:*void*
|  ChargeParameterDiscovery and during charging - Set the maximum power for the EVSE
|  **EVSEMaximumPowerLimit**:*number*
|   [W] Maximum power the EVSE can deliver
| **set_DC_EVSEMaximumVoltageLimit**:*void*
|  ChargeParameterDiscovery and during charging - Set the maximum voltage for the EVSE
|  **EVSEMaximumVoltageLimit**:*number*
|   [V] Maximum voltage the EVSE can deliver
| **set_DC_EVSEMinimumCurrentLimit**:*void*
|  ChargeParameterDiscovery - Set the minimum current for the EVSE
|  **EVSEMinimumCurrentLimit**:*number*
|   [A] Minimum current the EVSE can deliver with the expected accuracy
| **set_DC_EVSEMinimumVoltageLimit**:*void*
|  ChargeParameterDiscovery - Set the minimum voltage for the EVSE
|  **EVSEMinimumVoltageLimit**:*number*
|   [V] Minimum voltage the EVSE can deliver with the expected accuracy
| **set_EVSEIsolationStatus**:*void*
|  From ChargeParameterDiscovery to WeldingDetection (Optional) - Set the isolation condition (result of the isolation monitoring)
|  **EVSEIsolationStatus**:*string*
|   Set the isolation status
|   enum: Invalid, Valid, Warning, Fault, No_IMD
| **set_EVSE_UtilityInterruptEvent**:*void*
|  From ChargeParameterDiscovery to WeldingDetection - Utility Interrupt Event, Utility or Equipment operator has requested a temporary reduction in load
|  **EVSE_UtilityInterruptEvent**:*boolean*
|   True: Interrupt Event happend
| **set_EVSE_Malfunction**:*void*
|  Any Time - A non-recoverable charger fault has occurred (Isolation Failure, ...). It is permanently faulted
|  **EVSE_Malfunction**:*boolean*
|   True: Malfunction fault
| **set_EVSE_EmergencyShutdown**:*void*
|  Any Time - Charging System Incompatibility, Emergency Shutdown or 'E-Stop' button pressed at charging station
|  **EVSE_EmergencyShutdown**:*boolean*
|   True: Emergency Stop
| **set_MeterInfo**:*void*
|  During charging (Optional) - Includes the meterInfo record containing the latest meter reading and other meter relevant data
|  **powermeter**:*object*
|   Measured dataset
|   required: timestamp
|   properties:
|    **timestamp**:*number*
|     Timestamp of measurement
|    **meter_id**:*string*
|     A (user defined) meter if (e.g. id printed on the case)
|    **phase_seq_error**:*boolean*
|     true for 3 phase rotation error (ccw)
|    **energy_Wh_import**:*object*
|     Imported energy in Wh (from grid)
|     required: total
|     properties:
|      **total**:*number*
|       Sum value (which is relevant for billing)
|      **L1**:*number*
|       L1 value only
|      **L2**:*number*
|       L2 value only
|      **L3**:*number*
|       L3 value only
|    **energy_Wh_export**:*object*
|     Exported energy in Wh (to grid)
|     required: total
|     properties:
|      **total**:*number*
|       Sum value (which is relevant for billing)
|      **L1**:*number*
|       L1 value only
|      **L2**:*number*
|       L2 value only
|      **L3**:*number*
|       L3 value only
|    **power_W**:*object*
|     Instantaneous power in Watt. Negative values are exported, positive values imported Energy.
|     required: total
|     properties:
|      **total**:*number*
|       Sum value
|      **L1**:*number*
|       L1 value only
|      **L2**:*number*
|       L2 value only
|      **L3**:*number*
|       L3 value only
|    **voltage_V**:*object*
|     Voltage in Volts
|     required: L1
|     properties:
|      **L1**:*number*
|       L1 value only
|      **L2**:*number*
|       L2 value only
|      **L3**:*number*
|       L3 value only
|    **current_A**:*object*
|     Current in ampere
|     required: L1
|     properties:
|      **L1**:*number*
|       L1 value only
|      **L2**:*number*
|       L2 value only
|      **L3**:*number*
|       L3 value only
|      **N**:*number*
|       Neutral value only
|    **frequency_Hz**:*object*
|     Grid frequency in Hertz
|     required: L1
|     properties:
|      **L1**:*number*
|       L1 value
|      **L2**:*number*
|       L2 value
|      **L3**:*number*
|       L3 value
| **contactor_closed**:*void*
|  Response on AC_Close_Contactor - Set this element if the contactor is closed
|  **status**:*boolean*
|   True: Contactor is closed
| **contactor_open**:*void*
|  Response on AC_Open_Contactor - Set this element if the contactor is open
|  **status**:*boolean*
|   True: Contactor is open
