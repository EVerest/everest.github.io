
.. _everest_interfaces_ocpp_1_6_charge_point:


#####################
ocpp_1_6_charge_point
#####################

| This interface defines a OCPP 1.6 charge point


*********
Variables
*********
| **charging_schedules**:*object*
|  Object that contains OCPP charging schedules of all connectors. The object contains one composite charging schedule for each connector id starting from connector 0. Connector 0 contains a schedule for the whole charging station.
| **is_connected**:*boolean*
|  Indicates if chargepoint is connected to CSMS
| **configuration_key**:*object* (:ref:`ocpp-KeyValue <ocpp-KeyValue>`)
|  Published when a configuration key has been changed by the CSMS and a monitor has been registered using the command monitor_configuration_keys
|  **There is an extended definition for this object** :ref:`here <ocpp-KeyValue>`.

********
Commands
********
| **stop**:*boolean*
|  Disconnects the websocket connection and stops the OCPP communication. No OCPP messages will be stored and sent after a restart.
|  **Result**:*boolean*
|   Returns true if the service could be stopped successfully, else false
| **restart**:*boolean*
|  Connects the websocket and enables OCPP communication after a previous stop call.
|  **Result**:*boolean*
|   Returns true if the service could be restarted successfully, else false
| **data_transfer**:*object*
|  Performs a OCPP data transfer request and returns the response
|  **vendor_id**:*string*
|   VendorId
|  **message_id**:*string*
|   MessageId
|  **data**:*string*
|   Data
|  **Result**:*object* (:ref:`ocpp-DataTransferResponse <ocpp-DataTransferResponse>`)
|   Result object containing data transfer response
|   **There is an extended definition for this object** :ref:`here <ocpp-DataTransferResponse>`.
| **get_configuration_key**:*object*
|  Gets the response to the requested configuration key containing a list of the values of the requested keys  and a list of the keys that are unknown
|  **keys**:*array*
|   List of keys for which the values are requested. If empty, all keys and values are returned
|   items:
|    description:
|    type:
|  **Result**:*object* (:ref:`ocpp-GetConfigurationResponse <ocpp-GetConfigurationResponse>`)
|   Response to the requested operation
|   **There is an extended definition for this object** :ref:`here <ocpp-GetConfigurationResponse>`.
| **set_custom_configuration_key**:*string*
|  Command to set a custom configuration key. Its not possible to set standardized configuration keys externally
|  **key**:*string*
|   Key that should be set
|  **value**:*string*
|   Value that should be set for the given key
|  **Result**:*string* (:ref:`ocpp-ConfigurationStatus <ocpp-ConfigurationStatus>`)
|   Indicates the result of the requested operation
|   **There is an extended definition for this object** :ref:`here <ocpp-ConfigurationStatus>`.
| **monitor_configuration_keys**:*void*
|  Monitors the given configuration key. In case this configuration keys is changed by the CSMS the configuration key the changed configuration key will be published. Consecutive calls of this operation will not override but extend the existing monitors
|  **keys**:*array*
|   Keys that should be monitored
|   items:
|    description:
|    type:
