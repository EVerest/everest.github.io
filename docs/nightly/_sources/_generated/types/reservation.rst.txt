
.. _everest_types_reservation:


###########
reservation
###########

Auth module types

.. _reservation-ReservationResult:

| **ReservationResult**:*string* 
|  Data of a ReservationResult
|   Accepted: Reservation has been made
|   Faulted: Reservation has not been made, because evses / connectors or specified evse / connector are in a
|            faulted state
|   Occupied: Reservation has not been made. All evses or the specified evse / connector is occupied
|   Rejected: Reservation has not been made. Charge Point is not configured to accept reservations
|   Unavailable: Reservation has not been made, because evses or specified evse / connector are in an unavailable
|                state
|  enum:
|    - Accepted
|    - Faulted
|    - Occupied
|    - Rejected
|    - Unavailable

.. _reservation-Reservation:

| **Reservation**:*object* 
|  Details on Reservation
|  properties:
|   **evse_id**:*integer* <optional>
|    The id of the evse to be reserved. When dismissed means that the reservation is not for a specific evse
|   **reservation_id**:*integer* <required>
|    Id of the reservation
|   **id_token**:*string* <required>
|    id token of the reservation
|   **expiry_time**:*string* <required>
|    Absolute UTC time point when reservation expires in RFC3339 format
|    format:date-time
|   **parent_id_token**:*string* <optional>
|    parent_id
|   **connector_type**:*string* <optional> (:ref:`evse_manager-ConnectorTypeEnum <evse_manager-ConnectorTypeEnum>`)
|    The connector type to make a reservation for
|    **There is an extended definition for this object** :ref:`here <evse_manager-ConnectorTypeEnum>`.

.. _reservation-ReservationEndReason:

| **ReservationEndReason**:*string* 
|  Reason for reservation end
|   Expired: When the reservation expired before the reserved token was used for a session
|   Cancelled: When the reservation was cancelled manually
|   UsedToStartCharging: When the reservation ended because the reserved token was used for a session
|   GlobalReservationRequirementDropped: When the reservation ended for that specific EVSE because there is a
|                                        connector free and there are less reservations than available evse's
|                                        (reservation is still there but it is not occupying this EVSE anymore).
|  enum:
|    - Expired
|    - Cancelled
|    - UsedToStartCharging
|    - GlobalReservationRequirementDropped

.. _reservation-ReservationEnd:

| **ReservationEnd**:*object* 
|  Details on Reservation End
|  properties:
|   **reason**:*string* <required> (:ref:`reservation-ReservationEndReason <reservation-ReservationEndReason>`)
|    Reason why reservation ends
|    **There is an extended definition for this object** :ref:`here <reservation-ReservationEndReason>`.
|   **reservation_id**:*integer* <required>
|    reservation_id

.. _reservation-ReservationCheckStatus:

| **ReservationCheckStatus**:*string* 
|  The reservation status of an evse id. NotReserved: There is no reservation for the given evse id. NotReservedForToken: There is a reservation for the given evse id, but not for this token. ReservedForOtherToken: Reserved for other token and reservation has no parent token or parent token does not match. ReservedForOtherTokenAndHasParentToken: There is a reservation for another id token, but the reservation also has
|                                         a group id token (which was not given when calling this function).
|  enum:
|    - NotReserved
|    - ReservedForToken
|    - ReservedForOtherToken
|    - ReservedForOtherTokenAndHasParentToken

.. _reservation-ReservationCheck:

| **ReservationCheck**:*object* 
|  Check for a reserved token
|  properties:
|   **evse_id**:*integer* <optional>
|    The id of the evse to check. When it is dismissed, it means that the reservation is not for a specific evse.
|   **id_token**:*string* <required>
|    The id token to check the reservation for.
|   **group_id_token**:*string* <optional>
|    The group / parent id token to check the reservation for. If id_token is set and group_id_token as well, and id_token is incorrect, the group_id_token will be checked. If that one is correct, there is a reservation made for this group id token.

.. _reservation-ReservationUpdateStatus:

| **ReservationUpdateStatus**:*object* 
|  Status of a reservation
|  properties:
|   **reservation_id**:*integer* <required>
|    The reservation id
|   **reservation_status**:*string* <required>
|    The reservation status
|    enum:
|      - Expired
|      - Removed
|      - Placed
|      - Cancelled
|      - Used
