
.. _everest_interfaces_evse_board_support:


##################
evse_board_support
##################

| This interface defines the board support driver for AC or DC minimal power path: ControlPilot, output contactors.  Other components of the power path such as IMD(DC)/RCD(AC)/Connector Lock etc have their own interfaces.


*********
Variables
*********
| **event**:*object* (:ref:`board_support_common-BspEvent <board_support_common-BspEvent>`)
|  Event from ControlPilot signal/output relais
|  **There is an extended definition for this object** :ref:`here <board_support_common-BspEvent>`.
| **ac_nr_of_phases_available**:*integer*
|  Instantaneous phase count available to car
| **telemetry**:*object* (:ref:`evse_board_support-Telemetry <evse_board_support-Telemetry>`)
|  Other telemetry
|  **There is an extended definition for this object** :ref:`here <evse_board_support-Telemetry>`.
| **capabilities**:*object* (:ref:`evse_board_support-HardwareCapabilities <evse_board_support-HardwareCapabilities>`)
|  Hardware capabilities/limits. Initially EvseManager will call get_hw_capabilities once to fetch the limits and caches the limits internally. The BSP module does not have to publish this variable at all, then the initially fetched capabilities will be used. The BSP may publish this variable to update limits in case they change during runtime, e.g. if the maximum current changes because the hardware gets too hot.
|  **There is an extended definition for this object** :ref:`here <evse_board_support-HardwareCapabilities>`.
| **ac_pp_ampacity**:*object* (:ref:`board_support_common-ProximityPilot <board_support_common-ProximityPilot>`)
|  Current carrying capacity of the connected cable in ampere for AC charging with a socket. Publish whenever it changes. This has no meaning for DC or AC charging with a fixed attached cable, it does not  need to be implemented and the returned value is not used in those cases.
|  **There is an extended definition for this object** :ref:`here <board_support_common-ProximityPilot>`.

********
Commands
********
| **setup**:*void*
|  Setup config options
|  **three_phases**:*boolean*
|   true: Three phases enabled, false: only single phase
|  **has_ventilation**:*boolean*
|   true: Allow mode D charging, false: do not allow mode D charging
|  **country_code**:*string*
|   A two-letter country code in ISO 3166-1 alpha-2 format
| **get_hw_capabilities**:*object*
|  Get Hardware capability/limits. For AC these are the limits of the power path (e.g. relais etc).  For DC, these are the limits for the AC input of the ACDC converter stack, i.e. the complete AC input. Note that DC output limits are reported by the DC power supply itself.
|  **Result**:*object* (:ref:`evse_board_support-HardwareCapabilities <evse_board_support-HardwareCapabilities>`)
|   Hardware capability/limits
|   **There is an extended definition for this object** :ref:`here <evse_board_support-HardwareCapabilities>`.
| **enable**:*void*
|  Enables or disables the charging port. Typically disabled results in control pilot state F. It must not accept cars for new charging sessions if disabled.
|  **value**:*boolean*
|   True: enabled, false: disabled.
| **pwm_on**:*void*
|  Turns PWM on with duty cycle (in percent)
|  **value**:*number*
|   PWM duty cycle (>0, <100)
| **pwm_off**:*void*
|  Turns PWM off (constant high voltage)
| **pwm_F**:*void*
|  Turns PWM off with Error F (constant negative voltage)
| **allow_power_on**:*void*
|  Sets allow_power_on flag. If false, Relais must never be switched on.
|  **value**:*object* (:ref:`evse_board_support-PowerOnOff <evse_board_support-PowerOnOff>`)
|   Flag and context
|   **There is an extended definition for this object** :ref:`here <evse_board_support-PowerOnOff>`.
| **ac_switch_three_phases_while_charging**:*void*
|  Optional, in case of doubt do not implement. Report in hardware_capabilites if this command is supported. This command switches between one and three phase operation during an active charging session. Some cars can be permanently destroyed by that, so the bsp needs to implement a special sequence for the switching. The exact sequence can be defined by the BSP, but one example would be a C2->C1->B1->F->B1->B2->C2 or similar. Use with caution.
|  **value**:*boolean*
|   True: switch to 3ph, False: switch to 1ph
| **evse_replug**:*void*
|  Optional, in case of doubt do not implement. Special command initiate a virtual replug sequence without restarting session. Emits a EvseReplugStarted event if supported and started. BSP will take care to not emit other events such as CarPluggedIn/Out during that time. Once finished it will emit a EvseReplugFinished. This is mainly for testing purposes, don't implement for production use.
|  **value**:*integer*
|   Time in ms for the duration of the replug sequence
| **ac_read_pp_ampacity**:*object*
|  Read the current carrying capacity of the connected cable in ampere for AC charging with a socket. This function will be used by EvseManager to get the PP value at  a distinct time. You should also publish the var pp_ampacity whenever the PP ampacity reading changes to signal changes e.g. during the charging time. This has no meaning for DC or AC charging with a fixed attached cable, it does not  need to be implemented and the returned value is not used in those cases.
|  **Result**:*object* (:ref:`board_support_common-ProximityPilot <board_support_common-ProximityPilot>`)
|   Returns the current carrying capacity of the connected cable
|   **There is an extended definition for this object** :ref:`here <board_support_common-ProximityPilot>`.
| **ac_set_overcurrent_limit_A**:*void*
|  Many chargers implement a fast over current shutdown directly in the hardware that triggers if the EV draws more current than the PWM allows. If the hardware does not have this functionality, just ignore this command. Do not use it to set the PWM duty cycle. Otherwise this command reports a value that should be used for the overcurrent detection.  A margin needs to be added to avoid false triggers. Do not use the PWM duty cycle to infer the current limit in the BSP, as this will not work with HLC.
|  **value**:*number*
|   Ampere current limit value
