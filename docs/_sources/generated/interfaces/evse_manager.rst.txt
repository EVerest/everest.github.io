
.. _everest_interfaces_evse_manager:


############
evse_manager
############

| This interface defines the main evse manager


*********
Variables
*********
| **session_events**:*object* (:ref:`evse_manager-SessionEvents <evse_manager-SessionEvents>`)
|  Emits all events related to sessions
|  **There is an extended definition for this object** :ref:`here <evse_manager-SessionEvents>`.
| **limits**:*object*
|  Limits of this evse, published on change
|  required: max_current, nr_of_phases_available
|  properties:
|   **uuid**:*string*
|    This module's UUID for global identification
|   **max_current**:*number*
|    Instantaneous maximum current available to car
|   **nr_of_phases_available**:*integer*
|    Instantaneous phase count available to car
| **telemetry**:*object* (:ref:`board_support-Telemetry <board_support-Telemetry>`)
|  Other telemetry
|  **There is an extended definition for this object** :ref:`here <board_support-Telemetry>`.
| **powermeter**:*object* (:ref:`powermeter-Powermeter <powermeter-Powermeter>`)
|  Measured dataset
|  **There is an extended definition for this object** :ref:`here <powermeter-Powermeter>`.
| **evse_id**:*string*
|  EVSE ID including the connector number, e.g. DE*PNX*E123456*1

********
Commands
********
| **enable**:*boolean*
|  Enables the evse
|  **Result**:*boolean*
|   Returns true if evse was enabled (or was enabled before), returns false if enable failed e.g. due to permanent fault.
| **disable**:*boolean*
|  Disables the evse
|  **Result**:*boolean*
|   Returns true if evse was disabled (or was disabled before), returns false if it could not be disabled (i.e. due to communication error with hardware)
| **set_faulted**:*boolean*
|  Sets the evse manager to faulted
|  **Result**:*boolean*
|   Returns true if evse was set to faulted (or is already in that state)
| **pause_charging**:*boolean*
|  Pauses charging
|  **Result**:*boolean*
|   Returns true if successfully paused or was already in paused_by_evse mode
| **resume_charging**:*boolean*
|  Resumes charging
|  **Result**:*boolean*
|   Returns true if resume was successful, false otherwise (e.g. resuming a car pause won't work)
| **cancel_charging**:*boolean*
|  Cancels charging, can only be resumed by replugging car
|  **reason**:*string* (:ref:`evse_manager-SessionCancellationReason <evse_manager-SessionCancellationReason>`)
|   Reason for session cancellation
|   **There is an extended definition for this object** :ref:`here <evse_manager-SessionCancellationReason>`.
|  **Result**:*boolean*
|   Returns true if successful
| **accept_new_session**:*boolean*
|  Call when cleanup is done and new cars are allowed to plugin. Do not use multiple cleanup handlers, call from only one module!
|  **Result**:*boolean*
|   Returns true if successful
| **reserve_now**:*string*
|  Reserves this evse for a given auth token. No support for parent id tags or id 0 reservations.
|  **reservation_id**:*integer*
|   Reservation id for this reservation
|  **auth_token**:*string*
|   The authentication token that this evse will be reserved for
|  **expiry_date**:*string*
|   Absolute UTC time point when reservation expires (RFC3339 format)
|   format:
|  **parent_id**:*string*
|   Parent id of the authentication token
|  **Result**:*string* (:ref:`evse_manager-ReservationResult <evse_manager-ReservationResult>`)
|   Returns Accepted if reservation was succesfull or specifies error code.
|   **There is an extended definition for this object** :ref:`here <evse_manager-ReservationResult>`.
| **cancel_reservation**:*boolean*
|  Cancels current reservation
|  **Result**:*boolean*
|   Returns true if reservation was cancelled. Returns false if there was no reservation to cancel.
| **force_unlock**:*boolean*
|  Force unlock connector now. During normal operation, connector will be locked/unlocked in the correct sequence. Do not use this function except if explicitly requested by e.g. management cloud.
|  **Result**:*boolean*
|   Returns true if unlocking sequence was successfully executed
| **set_local_max_current**:*string*
|  Sets the local maximum current limit for any phase.
|  **max_current**:*number*
|   maximum current
|  **Result**:*string* (:ref:`evse_manager-SetLocalMaxCurrentResult <evse_manager-SetLocalMaxCurrentResult>`)
|   Returns success or error code
|   **There is an extended definition for this object** :ref:`here <evse_manager-SetLocalMaxCurrentResult>`.
| **switch_three_phases_while_charging**:*string*
|  Switch three phases while charging
|  **three_phases**:*boolean*
|   True if switching three phases whilst charging, false if not
|  **Result**:*string* (:ref:`evse_manager-SwitchThreePhasesWhileChargingResult <evse_manager-SwitchThreePhasesWhileChargingResult>`)
|   Returns success or error code
|   **There is an extended definition for this object** :ref:`here <evse_manager-SwitchThreePhasesWhileChargingResult>`.
| **get_signed_meter_value**:*string*
|  Returns a signed meter value. Includes current auth token if session is running.
|  **Result**:*string*
|   Signed meter value
