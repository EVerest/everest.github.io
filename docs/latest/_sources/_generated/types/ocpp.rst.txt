
.. _everest_types_ocpp:


####
ocpp
####

OCPP types (OCPP1.6 and OCPP2.0.1). The types are based more on the type definitions of OCPP201, as these offer more flexibility and are easier to transfer to OCPP1.6 than vice versa.

.. _ocpp-CustomData:

| **CustomData**:*object* 
|  Custom data extension
|  properties:
|   **vendor_id**:*string* <required>
|    Vendor Id to identify the customization, this is also included in the data field and only reproduced for convenience
|   **data**:*string* <required>
|    Custom json data object encoded as string

.. _ocpp-ChargingSchedulePeriod:

| **ChargingSchedulePeriod**:*object* 
|  Element providing information on a charging schedule period.
|  properties:
|   **start_period**:*integer* <required>
|    
|   **limit**:*number* <required>
|    
|   **number_phases**:*integer* <optional>
|    
|   **stack_level**:*integer* <required>
|    

.. _ocpp-ChargingSchedule:

| **ChargingSchedule**:*object* 
|  Element providing information on an OCPP charging schedule.
|  properties:
|   **evse**:*integer* <optional>
|    The OCPP 2.0.1 EVSE ID (not used in OCPP 1.6).
|   **connector**:*integer* <required>
|    
|   **charging_rate_unit**:*string* <required>
|    
|   **charging_schedule_period**:*array* <required>
|    
|    **array_item**:*object*  (:ref:`ocpp-ChargingSchedulePeriod <ocpp-ChargingSchedulePeriod>`)
|     schedule periods
|     **There is an extended definition for this object** :ref:`here <ocpp-ChargingSchedulePeriod>`.
| 
|   **duration**:*integer* <optional>
|    
|   **start_schedule**:*string* <optional>
|    
|   **min_charging_rate**:*number* <optional>
|    

.. _ocpp-ChargingSchedules:

| **ChargingSchedules**:*object* 
|  schedules for connectors
|  properties:
|   **schedules**:*array* <required>
|    array of schedules
|    **array_item**:*object*  (:ref:`ocpp-ChargingSchedule <ocpp-ChargingSchedule>`)
|     schedule for a connector
|     **There is an extended definition for this object** :ref:`here <ocpp-ChargingSchedule>`.
| 

.. _ocpp-OcppTransactionEvent:

| **OcppTransactionEvent**:*object* 
|  Element providing information on OCPP transactions.
|  properties:
|   **transaction_event**:*string* <required> (:ref:`ocpp-TransactionEvent <ocpp-TransactionEvent>`)
|    The transaction related event.
|    **There is an extended definition for this object** :ref:`here <ocpp-TransactionEvent>`.
|   **evse_id**:*integer* <required>
|    The OCPP 2.0.1 EVSE ID associated with the transaction.
|   **connector**:*integer* <required>
|    The connector associated with the transaction.
|   **session_id**:*string* <required>
|    The EVSE manager assigned session ID.
|   **transaction_id**:*string* <optional>
|    The CSMS assigned transaction ID. A string is used to support OCPP 2.0.1. For OCPP 1.6 the integer is converted to a string

.. _ocpp-TransactionEvent:

| **TransactionEvent**:*string* 
|  The transaction event enumeration
|  enum:
|    - Started
|    - Updated
|    - Ended

.. _ocpp-MessageContent:

| **MessageContent**:*object* 
|  Contains message details
|  properties:
|   **format**:*string* <required> (:ref:`ocpp-MessageFormat <ocpp-MessageFormat>`)
|    
|    **There is an extended definition for this object** :ref:`here <ocpp-MessageFormat>`.
|   **language**:*string* <optional>
|    
|   **content**:*string* <required>
|    

.. _ocpp-MessageFormat:

| **MessageFormat**:*string* 
|  Format of the message to be displayed
|  enum:
|    - ASCII
|    - HTML
|    - URI
|    - UTF8

.. _ocpp-OcppTransactionEventResponse:

| **OcppTransactionEventResponse**:*object* 
|  Information that can be returned with a OCPP TransactionEventResponse
|  properties:
|   **original_transaction_event**:*object* <required> (:ref:`ocpp-OcppTransactionEvent <ocpp-OcppTransactionEvent>`)
|    The original transaction event that promted this response
|    **There is an extended definition for this object** :ref:`here <ocpp-OcppTransactionEvent>`.
|   **total_cost**:*number* <optional>
|    Running or total cost
|   **charging_priority**:*integer* <optional>
|    Priority from -9 to 9 for smart charging, higher values mean higher priority
|   **personal_message**:*object* <optional> (:ref:`ocpp-MessageContent <ocpp-MessageContent>`)
|    Personal message
|    **There is an extended definition for this object** :ref:`here <ocpp-MessageContent>`.

.. _ocpp-DataTransferStatus:

| **DataTransferStatus**:*string* 
|  Data Transfer Status enum
|  enum:
|    - Accepted
|    - Rejected
|    - UnknownMessageId
|    - UnknownVendorId

.. _ocpp-DataTransferRequest:

| **DataTransferRequest**:*object* 
|  Type for data transfer request provided by OCPP
|  properties:
|   **vendor_id**:*string* <required>
|    Identifies the vendor
|   **message_id**:*string* <optional>
|    Identifies the message
|   **data**:*string* <optional>
|    Data provided by this data transfer
|   **custom_data**:*object* <optional> (:ref:`ocpp-CustomData <ocpp-CustomData>`)
|    Custom data extension
|    **There is an extended definition for this object** :ref:`here <ocpp-CustomData>`.

.. _ocpp-DataTransferResponse:

| **DataTransferResponse**:*object* 
|  Type for data transfer response provided by OCPP
|  properties:
|   **status**:*string* <required> (:ref:`ocpp-DataTransferStatus <ocpp-DataTransferStatus>`)
|    Status of the data transfer
|    **There is an extended definition for this object** :ref:`here <ocpp-DataTransferStatus>`.
|   **data**:*string* <optional>
|    Data provided by this data transfer
|   **custom_data**:*object* <optional> (:ref:`ocpp-CustomData <ocpp-CustomData>`)
|    Custom data extension
|    **There is an extended definition for this object** :ref:`here <ocpp-CustomData>`.

.. _ocpp-KeyValue:

| **KeyValue**:*object* 
|  Type for a key value pair
|  properties:
|   **key**:*string* <required>
|    Key / Identifier
|   **read_only**:*boolean* <required>
|    Indicates if the configuration key is configured to be read-only
|   **value**:*string* <optional>
|    Value of the configuration key

.. _ocpp-GetConfigurationResponse:

| **GetConfigurationResponse**:*object* 
|  Response to a GetConfiguration request
|  properties:
|   **configuration_keys**:*array* <required>
|    List of known configuration keys of key value pairs
|    **array_item**:*object*  (:ref:`ocpp-KeyValue <ocpp-KeyValue>`)
|     Key value pair
|     **There is an extended definition for this object** :ref:`here <ocpp-KeyValue>`.
| 
|   **unknown_keys**:*array* <required>
|    List of unknown configuration keys
|    **array_item**:*string* 
|     Unknown key
| 

.. _ocpp-ConfigurationStatus:

| **ConfigurationStatus**:*string* 
|  Response to a set_custom_configuration_key command
|  enum:
|    - Accepted
|    - Rejected
|    - RebootRequired
|    - NotSupported

.. _ocpp-SecurityEventEnum:

| **SecurityEventEnum**:*string* 
|  Enum for known security events
|  enum:
|    - FirmwareUpdated
|    - FailedToAuthenticateAtCsms
|    - CsmsFailedToAuthenticate
|    - SettingSystemTime
|    - StartupOfTheDevice
|    - ResetOrReboot
|    - SecurityLogWasCleared
|    - ReconfigurationOfSecurityParameters
|    - MemoryExhaustion
|    - InvalidMessages
|    - AttemptedReplayAttacks
|    - TamperDetectionActivated
|    - InvalidFirmwareSignature
|    - InvalidFirmwareSigningCertificate
|    - InvalidCsmsCertificate
|    - InvalidChargingStationCertificate
|    - InvalidTLSVersion
|    - InvalidTLSCipherSuite
|    - MaintenanceLoginAccepted
|    - MaintenanceLoginFailed

.. _ocpp-SecurityEvent:

| **SecurityEvent**:*object* 
|  Type for a security event
|  properties:
|   **type**:*string* <required>
|    Type of the security event
|   **info**:*string* <optional>
|    Additional information about the occurred security event

.. _ocpp-EVSE:

| **EVSE**:*object* 
|  Type of an EVSE. If only the id is present, this type identifies an EVSE. If also a connector_id is given, this type identifies a Connector of the EVSE
|  properties:
|   **id**:*integer* <required>
|    Id of the EVSE
|   **connector_id**:*integer* <optional>
|    An id to designate a specific connector (on an EVSE) by connector index number

.. _ocpp-Variable:

| **Variable**:*object* 
|  Type for a variable with a name and an optional instance For OCPP1.6: A Variable should only contain a name. The name identifies
|   the configuration key.
| For OCPP2.0.1: All properties of the Variable can be used
|  properties:
|   **name**:*string* <required>
|    Name of a variable
|   **instance**:*string* <optional>
|    Name of instance in case the variable exists as multiple instances

.. _ocpp-Component:

| **Component**:*object* 
|  Type for a component with name, optional instance and optional evse For OCPP1.6: A definition of a Component doesn't exist in OCPP1.6; In the context of OCPP1.6
|   this type may not be relevant or used.
| For OCPP2.0.1: All properties of the Component can be used
|  properties:
|   **name**:*string* <required>
|    Name of a component
|   **instance**:*string* <optional>
|    Name of instance in case the component exists as multiple instances
|   **evse**:*object* <optional> (:ref:`ocpp-EVSE <ocpp-EVSE>`)
|    Specifies the EVSE when component is located at EVSE level, also specifies the connector when component is located at Connector level
|    **There is an extended definition for this object** :ref:`here <ocpp-EVSE>`.

.. _ocpp-ComponentVariable:

| **ComponentVariable**:*object* 
|  Type for a combination of component and variable. Note that for OCPP1.6 only the Variable.name (configuration key) is sufficient to identify a configuration key. For OCPP2.0.1 all properties of the type(s) can be used.
|  properties:
|   **component**:*object* <required> (:ref:`ocpp-Component <ocpp-Component>`)
|    Component
|    **There is an extended definition for this object** :ref:`here <ocpp-Component>`.
|   **variable**:*object* <required> (:ref:`ocpp-Variable <ocpp-Variable>`)
|    Variable
|    **There is an extended definition for this object** :ref:`here <ocpp-Variable>`.

.. _ocpp-AttributeEnum:

| **AttributeEnum**:*string* 
|  Attribute enum Actual: The actual value of a variable Target: The target value of a variable MinSet: The minimal allowed value of a variable MaxSet: The maximum allowed value of a variable
|  enum:
|    - Actual
|    - Target
|    - MinSet
|    - MaxSet

.. _ocpp-GetVariableStatusEnumType:

| **GetVariableStatusEnumType**:*string* 
|  Indicates the status of the GetVariableRequest as part of the GetVariableResult operation Accepted: Variable successfully retrieved Rejected: Request is rejected UnknownComponent: Component is not known UnknownVariable: Variable is not known NotSupportedAttributeType: The AttributeType is not supported
|  enum:
|    - Accepted
|    - Rejected
|    - UnknownComponent
|    - UnknownVariable
|    - NotSupportedAttributeType

.. _ocpp-SetVariableStatusEnumType:

| **SetVariableStatusEnumType**:*string* 
|  Indicates the status of the SetVariableRequest operation as part of the SetVariableResult Accepted: Variable successfully set Rejected: Request is rejected UnknownComponent: Component is not known UnknownVariable: Variable is not known NotSupportedAttributeType: The AttributeType is not supported RebootRequired: A reboot is required
|  enum:
|    - Accepted
|    - Rejected
|    - UnknownComponent
|    - UnknownVariable
|    - NotSupportedAttributeType
|    - RebootRequired

.. _ocpp-EventTriggerEnum:

| **EventTriggerEnum**:*string* 
|  Indicates the trigger reason of a generic event as part of the type EventData Alerting: Monitored variable has passed an Lower or Upper Threshold Delta: Delta Monitored Variable value has changed by more than specified amount Periodic: Periodic Monitored Variable has been sampled for reporting at the specified interval
|  enum:
|    - Alerting
|    - Delta
|    - Periodic

.. _ocpp-EventNotificationType:

| **EventNotificationType**:*string* 
|  Indicates the event notification type as part of the type EventData HardWiredNotification: The software implemented by the manufacturer triggered a hardwired notification HardWiredMonitor: Triggered by a monitor, which is hardwired by the manufacturer PreconfiguredMonitor: Triggered by a monitor, which is preconfigured by the manufacturer. CustomMonitor: Triggered by a monitor which is set by a message by the Charging Station Operator.
|  enum:
|    - HardWiredNotification
|    - HardWiredMonitor
|    - PreconfiguredMonitor
|    - CustomMonitor

.. _ocpp-GetVariableRequest:

| **GetVariableRequest**:*object* 
|  Type to request a variable value (OCPP2.0.1) or configuration value (OCPP1.6)
|  properties:
|   **component_variable**:*object* <required> (:ref:`ocpp-ComponentVariable <ocpp-ComponentVariable>`)
|    Identifier for which the value should be requested
|    **There is an extended definition for this object** :ref:`here <ocpp-ComponentVariable>`.
|   **attribute_type**:*string* <optional> (:ref:`ocpp-AttributeEnum <ocpp-AttributeEnum>`)
|    AttributeEnum for which the value should be requested. When absent, actual is assumed
|    **There is an extended definition for this object** :ref:`here <ocpp-AttributeEnum>`.

.. _ocpp-GetVariableResult:

| **GetVariableResult**:*object* 
|  Result of a GetVariableRequest
|  properties:
|   **status**:*string* <required> (:ref:`ocpp-GetVariableStatusEnumType <ocpp-GetVariableStatusEnumType>`)
|    Status of the GetVariableResult
|    **There is an extended definition for this object** :ref:`here <ocpp-GetVariableStatusEnumType>`.
|   **attribute_type**:*string* <optional> (:ref:`ocpp-AttributeEnum <ocpp-AttributeEnum>`)
|    AttributeEnum for which the value was requested. When absent, actual is assumed
|    **There is an extended definition for this object** :ref:`here <ocpp-AttributeEnum>`.
|   **value**:*string* <optional>
|    Value of the requested variable and AttributeEnum. This field can only be empty when the given status is NOT accepted
|   **component_variable**:*object* <required> (:ref:`ocpp-ComponentVariable <ocpp-ComponentVariable>`)
|    Identifier for which the value was requested
|    **There is an extended definition for this object** :ref:`here <ocpp-ComponentVariable>`.

.. _ocpp-SetVariableRequest:

| **SetVariableRequest**:*object* 
|  Type to request to set a variable or configuration key
|  properties:
|   **component_variable**:*object* <required> (:ref:`ocpp-ComponentVariable <ocpp-ComponentVariable>`)
|    Identifier for which the value should be set
|    **There is an extended definition for this object** :ref:`here <ocpp-ComponentVariable>`.
|   **value**:*string* <required>
|    Value of the variable that should be set
|   **attribute_type**:*string* <optional> (:ref:`ocpp-AttributeEnum <ocpp-AttributeEnum>`)
|    AttributeEnum for which the value should be set. When absent, actual is assumed
|    **There is an extended definition for this object** :ref:`here <ocpp-AttributeEnum>`.

.. _ocpp-SetVariableResult:

| **SetVariableResult**:*object* 
|  Result of a SetVariableRequest
|  properties:
|   **status**:*string* <required> (:ref:`ocpp-SetVariableStatusEnumType <ocpp-SetVariableStatusEnumType>`)
|    Status of the SetVariableResult
|    **There is an extended definition for this object** :ref:`here <ocpp-SetVariableStatusEnumType>`.
|   **component_variable**:*object* <required> (:ref:`ocpp-ComponentVariable <ocpp-ComponentVariable>`)
|    Identifier for which the set of the value should be requested
|    **There is an extended definition for this object** :ref:`here <ocpp-ComponentVariable>`.
|   **attribute_type**:*string* <optional> (:ref:`ocpp-AttributeEnum <ocpp-AttributeEnum>`)
|    AttributeEnum for which the set of the value is requested. When absent, actual is assumed
|    **There is an extended definition for this object** :ref:`here <ocpp-AttributeEnum>`.

.. _ocpp-EventData:

| **EventData**:*object* 
|  Type to report an event notification for a component-variable
|  properties:
|   **component_variable**:*object* <required> (:ref:`ocpp-ComponentVariable <ocpp-ComponentVariable>`)
|    Identifier for which the event occured
|    **There is an extended definition for this object** :ref:`here <ocpp-ComponentVariable>`.
|   **event_id**:*integer* <required>
|    Identifies the event
|   **timestamp**:*string* <required>
|    Timestamp of the moment the report was generated
|    format:date-time
|   **trigger**:*string* <required> (:ref:`ocpp-EventTriggerEnum <ocpp-EventTriggerEnum>`)
|    Type of the monitor that triggered this event
|    **There is an extended definition for this object** :ref:`here <ocpp-EventTriggerEnum>`.
|   **actual_value**:*string* <required>
|    Actual value of the variable
|   **event_notification_type**:*string* <required> (:ref:`ocpp-EventNotificationType <ocpp-EventNotificationType>`)
|    Type of the event notification
|    **There is an extended definition for this object** :ref:`here <ocpp-EventNotificationType>`.
|   **cause**:*integer* <optional>
|    Refers to the Id of an event that is considered to be the cause for this event
|   **tech_code**:*string* <optional>
|    Technical (error) code as reported by component
|   **tech_info**:*string* <optional>
|    Technical detail information as reported by component
|   **cleared**:*boolean* <optional>
|    Cleared is set to true to report the clearing of a monitored situation
|   **transaction_id**:*string* <optional>
|    If an event notification is linked to a specific transaction, this field can be used to specify its transactionId
|   **variable_monitoring_id**:*integer* <optional>
|    Identifies the VariableMonitoring which triggered the event

.. _ocpp-OperationalStatusEnumType:

| **OperationalStatusEnumType**:*string* 
|  Operational status of Charging Station /EVSE / Connector
|  enum:
|    - Inoperative
|    - Operative

.. _ocpp-ChangeAvailabilityRequest:

| **ChangeAvailabilityRequest**:*object* 
|  Request type to change the availability of the Charging Station/ an EVSE / a Connector.
|  properties:
|   **operational_status**:*string* <required> (:ref:`ocpp-OperationalStatusEnumType <ocpp-OperationalStatusEnumType>`)
|    Type of availability change that the Charging Station should perform.
|    **There is an extended definition for this object** :ref:`here <ocpp-OperationalStatusEnumType>`.
|   **evse**:*object* <optional> (:ref:`ocpp-EVSE <ocpp-EVSE>`)
|    Specify EVSE/Connector whose status is changed. When omitted, the message refers to the Charging Station as a whole.
|    **There is an extended definition for this object** :ref:`here <ocpp-EVSE>`.

.. _ocpp-ChangeAvailabilityStatusEnumType:

| **ChangeAvailabilityStatusEnumType**:*string* 
|  Status returned in response to ChangeAvailabilityRequest.
|  enum:
|    - Accepted
|    - Rejected
|    - Scheduled

.. _ocpp-StatusInfoType:

| **StatusInfoType**:*object* 
|  Element providing more information about the status.
|  properties:
|   **reason_code**:*string* <required>
|    A predefined code for the reason why the status is returned in this response. The string is case-insensitive.
|   **additional_info**:*string* <optional>
|    Additional text to provide detailed information

.. _ocpp-ChangeAvailabilityResponse:

| **ChangeAvailabilityResponse**:*object* 
|  Response type to request to change the availability of the Charging Station/ an EVSE / a Connector.
|  properties:
|   **status**:*string* <required> (:ref:`ocpp-ChangeAvailabilityStatusEnumType <ocpp-ChangeAvailabilityStatusEnumType>`)
|    Indicates whether the Charging Station is able to perform the availability change.
|    **There is an extended definition for this object** :ref:`here <ocpp-ChangeAvailabilityStatusEnumType>`.
|   **status_info**:*object* <optional> (:ref:`ocpp-StatusInfoType <ocpp-StatusInfoType>`)
|    Detailed status information.
|    **There is an extended definition for this object** :ref:`here <ocpp-StatusInfoType>`.

.. _ocpp-RegistrationStatus:

| **RegistrationStatus**:*string* 
|  Indicates whether the Charging Station has been registered within the OCPP CSMS
|  enum:
|    - Accepted
|    - Pending
|    - Rejected

.. _ocpp-BootNotificationResponse:

| **BootNotificationResponse**:*object* 
|  OCPP BootNotificationResponse
|  properties:
|   **status**:*string* <required> (:ref:`ocpp-RegistrationStatus <ocpp-RegistrationStatus>`)
|    Indicates whether the Charging Station has been registered within the OCPP CSMS
|    **There is an extended definition for this object** :ref:`here <ocpp-RegistrationStatus>`.
|   **current_time**:*string* <required>
|    Contains the CSMS current time in RFC3339 format
|    format:date-time
|   **interval**:*integer* <required>
|    When Status is Accepted, this contains the heartbeat interval in seconds. If the CSMS returns something other than Accepted, the value of the interval field indicates the minimum wait time before sending a next BootNotification request.
|   **status_info**:*object* <optional> (:ref:`ocpp-StatusInfoType <ocpp-StatusInfoType>`)
|    Detailed status information.
|    **There is an extended definition for this object** :ref:`here <ocpp-StatusInfoType>`.
