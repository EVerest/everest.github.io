
.. _everest_types_energy:


######
energy
######

Energy import/export capability/limit types

.. _energy-AcCurrentLimit:

| **AcCurrentLimit**:*object*
|  AC current limit object
|  properties:
|   **current_A**:*number*
|    AC current limit per phase in Ampere
|   **phase_count**:*integer*
|    Limit to number of phases. Omit if number of phases are not limited.

.. _energy-EnforcedLimits:

| **EnforcedLimits**:*object*
|  Enforced limits
|  properties:
|   **ac_current_A**:*object* (:ref:`energy-AcCurrentLimit <energy-AcCurrentLimit>`)
|    AC current limit object
|    **There is an extended definition for this object** :ref:`here <energy-AcCurrentLimit>`.
|   **total_power_W**:*number*
|    Total power limit in Watt. Can be used for DC or as additional limit for AC.

.. _energy-Limits:

| **Limits**:*object*
|  Enforced limits that must be respected.
|  properties:
|   **valid_until**:*string*
|    Limits are valid until this timepoint in RFC3339 UTC. If no new update is received, power consumption must be stopped afer that timepoint.
|    format:
|   **request_parameters**:*object* (:ref:`energy-EnforcedLimits <energy-EnforcedLimits>`)
|    Enforced limits
|    **There is an extended definition for this object** :ref:`here <energy-EnforcedLimits>`.

.. _energy-LimitType:

| **LimitType**:*string*
|  Hard limits need to be enforced by EnergyManager, Soft limits may be ignored.
|  enum: Hard, Soft

.. _energy-LimitWithType:

| **LimitWithType**:*object*
|  Limit for this timestamp
|  required: limit_type
|  properties:
|   **limit_type**:*string* (:ref:`energy-LimitType <energy-LimitType>`)
|    Hard limits need to be enforced by EnergyManager, Soft limits may be ignored.
|    **There is an extended definition for this object** :ref:`here <energy-LimitType>`.
|   **ac_current_A**:*object* (:ref:`energy-AcCurrentLimit <energy-AcCurrentLimit>`)
|    AC current limit object
|    **There is an extended definition for this object** :ref:`here <energy-AcCurrentLimit>`.
|   **total_power_W**:*number*
|    Total power limit in Watt. Can be used for DC or as additional limit for AC.

.. _energy-TimeSeriesEntry:

| **TimeSeriesEntry**:*object*
|  One entry for the time series
|  required: timestamp, request_parameters
|  properties:
|   **timestamp**:*string*
|    Absolute timestamp for this sample in RFC3339 UTC format https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
|    format:
|   **request_parameters**:*object* (:ref:`energy-LimitWithType <energy-LimitWithType>`)
|    Limit for this timestamp
|    **There is an extended definition for this object** :ref:`here <energy-LimitWithType>`.
|   **price_per_kwh**:*object* (:ref:`energy_price_information-PricePerkWh <energy_price_information-PricePerkWh>`)
|    Price information for this timepoint
|    **There is an extended definition for this object** :ref:`here <energy_price_information-PricePerkWh>`.

.. _energy-NodeType:

| **NodeType**:*string*
|  Type of energy source/sink. Use Limit if this purely enforces limits but is not a physical energy source/sink.
|  enum: Grid, GridConnection, Solar, Battery, Fuse, Evse

.. _energy-OptimizerTarget:

| **OptimizerTarget**:*object*
|  User defined optimizer targets for this evse
|  properties:
|   **energy_amount_needed**:*number*
|    Amount of kwh the car needs to fulfill its charging target
|   **charge_to_max_percent**:*number*
|    Charge car battery to max NN percent
|   **car_battery_soc**:*number*
|    Car battery State Of Charge in percent
|   **leave_time**:*string*
|    RFC3339 UTC format time when the car needs to drive away with charging targets fullfilled. Will charge cheapest within this timeframe.
|   **price_limit**:*number*
|    Always charge if price below this limit. This includes solar charging and price for solar energy if price levels set correctly.
|   **full_autonomy**:*boolean*
|    Only charge from locally generated energy. Do not draw power from grid for charging.

.. _energy-AcCurrentLimitExtended:

| **AcCurrentLimitExtended**:*object*
|  AC current limit object
|  required: max_current_A
|  properties:
|   **max_current_A**:*number*
|    Max AC current limit per phase in Ampere
|   **min_current_A**:*number*
|    Minimal AC current limit per phase in Ampere to be able to charge
|   **max_phase_count**:*integer*
|    Max Limit of number of phases. Omit if number of phases are not limited.
|   **min_phase_count**:*integer*
|    Minimum number of phases that can be used for proper operation.
|   **supports_changing_phases_during_charging**:*boolean*
|    Indicate whether phase switching is allowed during charging or not

.. _energy-LimitWithTypeExtended:

| **LimitWithTypeExtended**:*object*
|  Limit for this timestamp
|  required: limit_type
|  properties:
|   **limit_type**:*string* (:ref:`energy-LimitType <energy-LimitType>`)
|    Hard limits need to be enforced by EnergyManager, Soft limits may be ignored.
|    **There is an extended definition for this object** :ref:`here <energy-LimitType>`.
|   **ac_current_A**:*object* (:ref:`energy-AcCurrentLimitExtended <energy-AcCurrentLimitExtended>`)
|    AC current limit object
|    **There is an extended definition for this object** :ref:`here <energy-AcCurrentLimitExtended>`.
|   **total_power_W**:*number*
|    Total power limit in Watt. Can be used for DC or as additional limit for AC.

.. _energy-TimeSeriesEntryExtended:

| **TimeSeriesEntryExtended**:*object*
|  One entry for the time series
|  required: timestamp, request_parameters
|  properties:
|   **timestamp**:*string*
|    Absolute timestamp for this sample in RFC3339 UTC format https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
|    format:
|   **request_parameters**:*object* (:ref:`energy-LimitWithTypeExtended <energy-LimitWithTypeExtended>`)
|    Limit for this timestamp
|    **There is an extended definition for this object** :ref:`here <energy-LimitWithTypeExtended>`.
|   **price_per_kwh**:*object* (:ref:`energy_price_information-PricePerkWh <energy_price_information-PricePerkWh>`)
|    Price information for this timepoint
|    **There is an extended definition for this object** :ref:`here <energy_price_information-PricePerkWh>`.
