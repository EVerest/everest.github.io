
.. _everest_interfaces_evse_manager:


############
evse_manager
############

| This interface defines the evse manager. An evse manager represents the charging kernel of one physical connector.


*********
Variables
*********
| **session_event**:*object*  (:ref:`evse_manager-SessionEvent <evse_manager-SessionEvent>`)
|  Emits all events related to sessions
|  **There is an extended definition for this object** :ref:`here <evse_manager-SessionEvent>`.
| **limits**:*object*  (:ref:`evse_manager-Limits <evse_manager-Limits>`)
|  Limits of this evse, published on change
|  **There is an extended definition for this object** :ref:`here <evse_manager-Limits>`.
| **ev_info**:*object*  (:ref:`evse_manager-EVInfo <evse_manager-EVInfo>`)
|  More details about the EV if available
|  **There is an extended definition for this object** :ref:`here <evse_manager-EVInfo>`.
| **car_manufacturer**:*string*  (:ref:`evse_manager-CarManufacturer <evse_manager-CarManufacturer>`)
|  Car manufacturer (if known)
|  **There is an extended definition for this object** :ref:`here <evse_manager-CarManufacturer>`.
| **telemetry**:*object*  (:ref:`evse_board_support-Telemetry <evse_board_support-Telemetry>`)
|  Other telemetry
|  **There is an extended definition for this object** :ref:`here <evse_board_support-Telemetry>`.
| **powermeter**:*object*  (:ref:`powermeter-Powermeter <powermeter-Powermeter>`)
|  Measured dataset
|  **There is an extended definition for this object** :ref:`here <powermeter-Powermeter>`.
| **evse_id**:*string* 
|  EVSE ID including the connector number, e.g. DE*PNX*E123456*1
| **hw_capabilities**:*object*  (:ref:`evse_board_support-HardwareCapabilities <evse_board_support-HardwareCapabilities>`)
|  Hardware capability/limits
|  **There is an extended definition for this object** :ref:`here <evse_board_support-HardwareCapabilities>`.
| **iso15118_certificate_request**:*object*  (:ref:`iso15118_charger-Request_Exi_Stream_Schema <iso15118_charger-Request_Exi_Stream_Schema>`)
|  The vehicle requests the SECC to deliver the certificate that belong  to the currently valid contract of the vehicle. Response will be reported async via  set_get_certificate_response
|  **There is an extended definition for this object** :ref:`here <iso15118_charger-Request_Exi_Stream_Schema>`.
| **enforced_limits**:*object*  (:ref:`energy-EnforcedLimits <energy-EnforcedLimits>`)
|  Enforced limits for this node (coming from the EnergyManager)
|  **There is an extended definition for this object** :ref:`here <energy-EnforcedLimits>`.
| **waiting_for_external_ready**:*boolean* 
|  Signals that the EVSE Manager is in principle ready to start charging, but delays sending its ready signal waiting for the external_ready_to_start_charging command.
| **ready**:*boolean* 
|  Signals that the EVSE Manager is ready to start charging
| **selected_protocol**:*string* 
|  Contains the selected protocol used for charging for informative purposes

********
Commands
********
| **get_evse**:*object*
|  Call to get information about the EVSE including its connectors
|  **Result**:*object*  (:ref:`evse_manager-Evse <evse_manager-Evse>`)
|   Object that contains information of the EVSE including its connectors
|   **There is an extended definition for this object** :ref:`here <evse_manager-Evse>`.
| **enable_disable**:*boolean*
|  Enables or disables the evse. Turns off PWM with error F. Charging is only possible if an EVSE is enabled.
|  **connector_id**:*integer* <required>
|   Specifies the ID of the connector to enable. If 0, the whole EVSE should be enabled
|  **cmd_source**:*object* <required> (:ref:`evse_manager-EnableDisableSource <evse_manager-EnableDisableSource>`)
|   Source of the enable command
|   **There is an extended definition for this object** :ref:`here <evse_manager-EnableDisableSource>`.
|  **Result**:*boolean* 
|   Returns true if evse is enabled after the command, false if it is disabled. This may not be the same value as the request, since there may be a higher priority request from another source that is actually deciding whether it is enabled or disabled.
| **authorize_response**:*void*
|  Reports the result of an authorization request to the EvseManager.  Contains the provided_token for which authorization was requested and the validation_result
|  **provided_token**:*object* <required> (:ref:`authorization-ProvidedIdToken <authorization-ProvidedIdToken>`)
|   The token for which authorization was requested
|   **There is an extended definition for this object** :ref:`here <authorization-ProvidedIdToken>`.
|  **validation_result**:*object* <required> (:ref:`authorization-ValidationResult <authorization-ValidationResult>`)
|   The validation result
|   **There is an extended definition for this object** :ref:`here <authorization-ValidationResult>`.
| **withdraw_authorization**:*void*
|  Call to signals that EVSE is not further authorized to start a transaction (e.g. on a connection_timeout)
| **reserve**:*boolean*
|  Call to signal that EVSE is reserved. This can be used to e.g. change the color of the HMI LEDs to indicate reservation.
|  **reservation_id**:*integer* <required>
|   The reservation id (should be added to the TransactionStarted event)
|  **Result**:*boolean* 
|   Returns true if the EVSE accepted the reservation, else false.
| **cancel_reservation**:*void*
|  Call to signal that EVSE is not reserved anymore
| **set_faulted**:*void*
|  Sets the evse manager to faulted externally. It may also switch to faulted itself if it detects an internal error.
| **pause_charging**:*boolean*
|  Call to signal EVSE to pause charging
|  **Result**:*boolean* 
|   Returns true if successfully paused or was already in paused_by_evse mode
| **resume_charging**:*boolean*
|  Call to signal EVSE to resume charging
|  **Result**:*boolean* 
|   Returns true if resume was successful, false otherwise (e.g. resuming a car pause won't work)
| **stop_transaction**:*boolean*
|  Stops transaction and cancels charging externally, charging can only be resumed by replugging car. EVSE will also stop transaction automatically e.g. on disconnect, so this only needs to be called if the transaction should end before.
|  **request**:*object* <required> (:ref:`evse_manager-StopTransactionRequest <evse_manager-StopTransactionRequest>`)
|   Request to stop the transaction.
|   **There is an extended definition for this object** :ref:`here <evse_manager-StopTransactionRequest>`.
|  **Result**:*boolean* 
|   Returns true if successful
| **force_unlock**:*boolean*
|  Forces connector to unlock connector now. During normal operation, connector will be locked/unlocked in the correct sequence. Do not use this function except if explicitly requested by e.g. management cloud.
|  **connector_id**:*integer* <required>
|   Specifies the ID of the connector that should be unlocked
|  **Result**:*boolean* 
|   Returns true if unlocking sequence was successfully executed
| **set_external_limits**:*void*
|  Set additional external energy flow limits at this node.
|  **value**:*object* <required> (:ref:`energy-ExternalLimits <energy-ExternalLimits>`)
|   UUID of node that this limit applies to
|   **There is an extended definition for this object** :ref:`here <energy-ExternalLimits>`.
| **set_get_certificate_response**:*void*
|  CertificateInstallationRes/CertificateUpdateRes - Set the new/updated Contract Certificate (including the certificate chain) and the corresponding encrypted private key. Should be forwared to EVCC. This is an async response to a previously published iso15118_certificate_request
|  **certificate_response**:*object* <required> (:ref:`iso15118_charger-Response_Exi_Stream_Status <iso15118_charger-Response_Exi_Stream_Status>`)
|   The response raw exi stream and the status from the CSMS system
|   **There is an extended definition for this object** :ref:`here <iso15118_charger-Response_Exi_Stream_Status>`.
| **external_ready_to_start_charging**:*boolean*
|  There are situations where another module needs to do some initialization after evse manager is in principle ready to start charging. This command can be used (optimally in combination with a configuration option) to delay charging ready until the external module is done with its initialization
|  **Result**:*boolean* 
|   Returns true if the signal was used by the evse manager implementation
